// Generated by cpp11: do not edit by hand
// clang-format off

#include "tibblify_types.h"
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// collector-method.cpp
SEXP tibblify_impl(SEXP object_list, SEXP spec, cpp11::external_pointer<Path> path_ptr);
extern "C" SEXP _tibblify_tibblify_impl(SEXP object_list, SEXP spec, SEXP path_ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(tibblify_impl(cpp11::as_cpp<cpp11::decay_t<SEXP>>(object_list), cpp11::as_cpp<cpp11::decay_t<SEXP>>(spec), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<Path>>>(path_ptr)));
  END_CPP11
}
// collector-method.cpp
void init_logging(const std::string& log_level);
extern "C" SEXP _tibblify_init_logging(SEXP log_level) {
  BEGIN_CPP11
    init_logging(cpp11::as_cpp<cpp11::decay_t<const std::string&>>(log_level));
    return R_NilValue;
  END_CPP11
}
// Path.h
SEXP init_tibblify_path();
extern "C" SEXP _tibblify_init_tibblify_path() {
  BEGIN_CPP11
    return cpp11::as_sexp(init_tibblify_path());
  END_CPP11
}
// Path.h
SEXP get_path_data(cpp11::external_pointer<Path> path_ptr);
extern "C" SEXP _tibblify_get_path_data(SEXP path_ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_path_data(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<Path>>>(path_ptr)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP tibblify_initialize(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_tibblify_get_path_data",      (DL_FUNC) &_tibblify_get_path_data,      1},
    {"_tibblify_init_logging",       (DL_FUNC) &_tibblify_init_logging,       1},
    {"_tibblify_init_tibblify_path", (DL_FUNC) &_tibblify_init_tibblify_path, 0},
    {"_tibblify_tibblify_impl",      (DL_FUNC) &_tibblify_tibblify_impl,      3},
    {"tibblify_initialize",          (DL_FUNC) &tibblify_initialize,          1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_tibblify(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
