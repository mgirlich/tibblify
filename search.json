[{"path":[]},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://mgirlich.github.io/tibblify/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://mgirlich.github.io/tibblify/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tibblify","title":"Contributing to tibblify","text":"outlines propose change tibblify. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://mgirlich.github.io/tibblify/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tibblify","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://mgirlich.github.io/tibblify/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tibblify","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://mgirlich.github.io/tibblify/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tibblify","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"mgirlich/tibblify\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://mgirlich.github.io/tibblify/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tibblify","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://mgirlich.github.io/tibblify/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tibblify","text":"Please note tibblify project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mgirlich.github.io/tibblify/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 Maximilian Girlich  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. tibblify Copyright (C) 2020 Maximilian Girlich This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mgirlich.github.io/tibblify/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with tibblify","title":"Getting help with tibblify","text":"Thanks using tibblify! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://mgirlich.github.io/tibblify/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with tibblify","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://mgirlich.github.io/tibblify/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with tibblify","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://mgirlich.github.io/tibblify/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with tibblify","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"supported-input-for-tibblify","dir":"Articles","previous_headings":"","what":"Supported input for tibblify()","title":"Overview supported structures","text":"idea tibblify() make easier robust convert lists lists tibbles. typical task receiving API responses JSON format. following provides overview kind R objects supported JSON correspond .","code":""},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"scalars","dir":"Articles","previous_headings":"Supported input for tibblify()","what":"Scalars","title":"Overview supported structures","text":"4 basic types scalars coming JSON: boolean, integer, float, string. R really scalars vectors length 1. R vectors without JSON equivalent also supported long : vector vctrs definition size one, .e. vctrs::vec_size(x) 1. Examples Date POSIXct. general scalar can parsed tib_scalar(). special functions common types: tib_lgl() tib_int() tib_dbl() tib_chr() tib_date() tib_chr_date() parse dates encoded string.","code":"true 1 1.5 \"a\" TRUE 1 1.5 \"a\""},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"vectors","dir":"Articles","previous_headings":"Supported input for tibblify()","what":"Vectors","title":"Overview supported structures","text":"homogeneous JSON array array scalar scalar type. R correspond logical(), integer(), double() character() vector: scalars types also supported long vector vctrs definition. can parsed tib_vector(). scalars shortcuts common types, e.g. tib_lgl_vec().","code":"[true, null, false] [1, null, 3] [1.5, null, 3.5] [\"a\", null, \"c\"] c(TRUE, NA, FALSE) c(1L, NA, 2L) c(1.5, NA, 2.5) c(\"a\", NA, \"c\")"},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"empty-lists","dir":"Articles","previous_headings":"Supported input for tibblify() > Vectors","what":"Empty lists","title":"Overview supported structures","text":"special case empty lists list(). might appear parsing empty JSON array: default supported produce error: Use vector_allows_empty_list = TRUE tspec_*() converted empty vector instead:","code":"x_json <- '[   {\"a\": [1, 2]},   {\"a\": []} ]'  x <- jsonlite::fromJSON(x_json, simplifyDataFrame = FALSE) str(x) #> List of 2 #>  $ :List of 1 #>   ..$ a: int [1:2] 1 2 #>  $ :List of 1 #>   ..$ a: list() tibblify(x, tspec_df(tib_int_vec(\"a\"))) #> Error in `tibblify()`: #> ! Problem while tibblifying `x[[2]]$a` #> Caused by error: #> ! Can't convert <list> to <integer>. tibblify(x, tspec_df(tib_int_vec(\"a\"), vector_allows_empty_list = TRUE))$a #> <list_of<integer>[2]> #> [[1]] #> [1] 1 2 #>  #> [[2]] #> integer(0)"},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"homogeneous-r-lists-of-scalars","dir":"Articles","previous_headings":"Supported input for tibblify() > Vectors","what":"Homogeneous R lists of scalars","title":"Overview supported structures","text":"using jsonlite::fromJSON(simplifyVector = FALSE) parse JSON R object one get R vectors homogeneous lists scalars: default parsed tib_vector() Use input_form = \"scalar_list\" tib_vector() parse :","code":"x_json <- '[   {\"a\": [1, 2]},   {\"a\": [1, 2, 3]} ]'  x <- jsonlite::fromJSON(x_json, simplifyVector = FALSE) str(x) #> List of 2 #>  $ :List of 1 #>   ..$ a:List of 2 #>   .. ..$ : int 1 #>   .. ..$ : int 2 #>  $ :List of 1 #>   ..$ a:List of 3 #>   .. ..$ : int 1 #>   .. ..$ : int 2 #>   .. ..$ : int 3 tibblify(x, tspec_df(tib_int_vec(\"a\"))) #> Error in `tibblify()`: #> ! Problem while tibblifying `x[[1]]$a` #> Caused by error: #> ! Can't convert <list> to <integer>. tibblify(x, tspec_df(tib_int_vec(\"a\", input_form = \"scalar_list\")))$a #> <list_of<integer>[2]> #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 2 3"},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"homogeneous-json-objects-of-scalars","dir":"Articles","previous_headings":"Supported input for tibblify()","what":"Homogeneous JSON objects of scalars","title":"Overview supported structures","text":"Sometimes vectors encoded objects JSON: Use input_form = \"object\" tib_vector() parse . actually store names use names_to values_to argument:","code":"x_json <- '[   {\"a\": {\"x\": 1, \"y\": 2}},   {\"a\": {\"a\": 1, \"b\": 2, \"b\": 3}} ]'  x <- jsonlite::fromJSON(x_json, simplifyVector = FALSE) str(x) #> List of 2 #>  $ :List of 1 #>   ..$ a:List of 2 #>   .. ..$ x: int 1 #>   .. ..$ y: int 2 #>  $ :List of 1 #>   ..$ a:List of 3 #>   .. ..$ a: int 1 #>   .. ..$ b: int 2 #>   .. ..$ b: int 3 spec <- tspec_df(   tib_int_vec(     \"a\",     input_form = \"object\",     names_to = \"name\",     values_to = \"value\"   ) )  tibblify(x, spec)$a #> <list_of< #>   tbl_df< #>     name : character #>     value: integer #>   > #> >[2]> #> [[1]] #> # A tibble: 2 × 2 #>   name  value #>   <chr> <int> #> 1 x         1 #> 2 y         2 #>  #> [[2]] #> # A tibble: 3 × 2 #>   name  value #>   <chr> <int> #> 1 a         1 #> 2 b         2 #> 3 b         3"},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"varying","dir":"Articles","previous_headings":"Supported input for tibblify()","what":"Varying","title":"Overview supported structures","text":"Lists elements common type vary. example: can parsed tib_variant().","code":"[1, \"a\", true] list(1, \"a\", TRUE)"},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"object","dir":"Articles","previous_headings":"Supported input for tibblify()","what":"Object","title":"Overview supported structures","text":"R equivalent JSON object named list names fulfill requirements vctrs::vec_as_names(repair = \"check_unique\"). can parsed tib_row(). example","code":"{   \"a\": 1,   \"b\": true } x <- list(   a = 1,   b = TRUE ) x <- list(   list(row = list(a = 1, b = TRUE)),   list(row = list(a = 2, b = FALSE)) )  spec <- tspec_df(   tib_row(     \"row\",     tib_int(\"a\"),     tib_lgl(\"b\")   ) )  tibblify(x, spec) #> # A tibble: 2 × 1 #>   row$a $b    #>   <int> <lgl> #> 1     1 TRUE  #> 2     2 FALSE"},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"data-frames","dir":"Articles","previous_headings":"Supported input for tibblify()","what":"Data Frames","title":"Overview supported structures","text":"List objects can parsed tib_df().","code":"[   {\"a\": 1, \"b\": true},   {\"b\": 2, \"b\": false} ] x <- list(   list(a = 1, b = TRUE),   list(a = 2, b = FALSE) )"},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"object-of-objects","dir":"Articles","previous_headings":"Supported input for tibblify() > Data Frames","what":"Object of objects","title":"Overview supported structures","text":"special form named lists object. JSON represented objects element object. also parsed tib_df() can parse names extra column via .names_to argument:","code":"{   \"object1\": {\"a\": 1, \"b\": true},   \"object2\": {\"b\": 2, \"b\": false} } x <- list(   object1 = list(a = 1, b = TRUE),   object2 = list(a = 2, b = FALSE) ) x_json <- '[ {   \"df\": {     \"object1\": {\"a\": 1, \"b\": true},     \"object2\": {\"a\": 2, \"b\": false}   } }]'  x <- jsonlite::fromJSON(x_json, simplifyDataFrame = FALSE)  spec <- tspec_df(   tib_df(     \"df\",     tib_int(\"a\"),     tib_lgl(\"b\"),     .names_to = \"name\"   ) )  tibblify(x, spec)$df #> <list_of< #>   tbl_df< #>     name: character #>     a   : integer #>     b   : logical #>   > #> >[1]> #> [[1]] #> # A tibble: 2 × 3 #>   name        a b     #>   <chr>   <int> <lgl> #> 1 object1     1 TRUE  #> 2 object2     2 FALSE"},{"path":"https://mgirlich.github.io/tibblify/articles/overview-supported-structures.html","id":"column-major-format","dir":"Articles","previous_headings":"Supported input for tibblify() > Data Frames","what":"Column major format","title":"Overview supported structures","text":"column major format also supported via .input_form = \"colmajor\" tspec_*():","code":"{   \"a\": [1, 2],   \"b\": [true, false] } x <- list(   a = c(1, 2),   b = c(TRUE, FALSE) ) df_spec <- tspec_df(   tib_int(\"a\"),   tib_lgl(\"b\"),   .input_form = \"colmajor\" )  tibblify(x, df_spec) #> # A tibble: 2 × 2 #>       a b     #>   <int> <lgl> #> 1     1 TRUE  #> 2     2 FALSE"},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"tibblify","text":"tibblify() can rectangle deeply nested lists tidy tibble. lists might come API form JSON scraping XML. reasons use tibblify() tools like jsonlite::fromJSON() tidyr::hoist() : can guess output format like jsonlite::fromJSON(). can also provide specification rectangle. specification easy understand. can bring inputs shape want single step. Rectangling much faster jsonlite::fromJSON().","code":""},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"tibblify","text":"Let’s start gh_users, list containing information four GitHub users. Quickly rectangling gh_users_small easy applying tibblify() : can now look specification tibblify() used rectangling interested fields can easily adapt specification","code":"library(tibblify)  gh_users_small <- purrr::map(gh_users, ~ .x[c(\"followers\", \"login\", \"url\", \"name\", \"location\", \"email\", \"public_gists\")])  names(gh_users_small[[1]]) #> [1] \"followers\"    \"login\"        \"url\"          \"name\"         \"location\"     #> [6] \"email\"        \"public_gists\" tibblify(gh_users_small) #> The spec contains 1 unspecified field: #> • email #> # A tibble: 4 × 7 #>   followers login      url                    name  location email  public_gists #>       <int> <chr>      <chr>                  <chr> <chr>    <list>        <int> #> 1       780 jennybc    https://api.github.co… Jenn… Vancouv… <NULL>           54 #> 2      3958 jtleek     https://api.github.co… Jeff… Baltimo… <NULL>           12 #> 3       115 juliasilge https://api.github.co… Juli… Salt La… <NULL>            4 #> 4       213 leeper     https://api.github.co… Thom… London,… <NULL>           46 guess_tspec(gh_users_small) #> The spec contains 1 unspecified field: #> • email #> tspec_df( #>   tib_int(\"followers\"), #>   tib_chr(\"login\"), #>   tib_chr(\"url\"), #>   tib_chr(\"name\"), #>   tib_chr(\"location\"), #>   tib_unspecified(\"email\"), #>   tib_int(\"public_gists\"), #> ) spec <- tspec_df(   login_name = tib_chr(\"login\"),   tib_chr(\"name\"),   tib_int(\"public_gists\") )  tibblify(gh_users_small, spec) #> # A tibble: 4 × 3 #>   login_name name                   public_gists #>   <chr>      <chr>                         <int> #> 1 jennybc    Jennifer (Jenny) Bryan           54 #> 2 jtleek     Jeff L.                          12 #> 3 juliasilge Julia Silge                       4 #> 4 leeper     Thomas J. Leeper                 46"},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"objects","dir":"Articles","previous_headings":"","what":"Objects","title":"tibblify","text":"refer lists like gh_users_small collection objects elements lists. Objects collections typical input tibblify(). Basically, object simply something can converted one row tibble. boils condition names object: object must names (names attribute must NULL), every element must named (name can NA \"\"), names must unique. words, names must fulfill vec_as_names(repair = \"check_unique\"). name-value pairs object fields. example list(x = 1, y = \"\") object fields (x, 1) (y, \"\") list(1, z = 3) object fully named. collection basically just list similar objects fields can become columns tibble.","code":""},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"specification","dir":"Articles","previous_headings":"","what":"Specification","title":"tibblify","text":"Providing explicit specification couple advantages: can ensure type shape stability resulting tibble automated scripts. can give columns different names. can restrict parsing fields need. can specify happens value missing. seen specification collection done tspec_df(). columns output tibble describe tib_*() functions. describe path field extract output type field. following five types functions: tib_scalar(ptype): length one vector type ptype tib_vector(ptype): vector arbitrary length type ptype tib_variant(): vector arbitrary length type; barely ever need tib_row(...): object fields ... tib_df(...): collection objects fields ... convenience shortcuts tib_scalar() tib_vector() common prototypes: logical(): tib_lgl() tib_lgl_vec() integer(): tib_int() tib_int_vec() double(): tib_dbl() tib_dbl_vec() character(): tib_chr() tib_chr_vec() Date: tib_date() tib_date_vec() Date encoded character: tib_chr_date() tib_chr_date_vec()","code":""},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"scalar-elements","dir":"Articles","previous_headings":"Specification","what":"Scalar Elements","title":"tibblify","text":"Scalar elements common case result normal vector column tib_scalar() can also provide prototype Let’s say list durations use tib_scalar()","code":"tibblify(   list(     list(id = 1, name = \"Peter\"),     list(id = 2, name = \"Lilly\")   ),   tspec_df(     tib_int(\"id\"),     tib_chr(\"name\")   ) ) #> # A tibble: 2 × 2 #>      id name  #>   <int> <chr> #> 1     1 Peter #> 2     2 Lilly x <- list(   list(id = 1, duration = vctrs::new_duration(100)),   list(id = 2, duration = vctrs::new_duration(200)) ) x #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$duration #> Time difference of 100 secs #>  #>  #> [[2]] #> [[2]]$id #> [1] 2 #>  #> [[2]]$duration #> Time difference of 200 secs tibblify(   x,   tspec_df(     tib_int(\"id\"),     tib_scalar(\"duration\", ptype = vctrs::new_duration())   ) ) #> # A tibble: 2 × 2 #>      id duration #>   <int> <drtn>   #> 1     1 100 secs #> 2     2 200 secs"},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"vector-elements","dir":"Articles","previous_headings":"Specification","what":"Vector Elements","title":"tibblify","text":"element always size one vector element. still always type ptype produces list ptype column: can use tidyr::unnest() tidyr::unnest_longer() flatten columns regular columns.","code":"x <- list(   list(id = 1, children = c(\"Peter\", \"Lilly\")),   list(id = 2, children = \"James\"),   list(id = 3, children = c(\"Emma\", \"Noah\", \"Charlotte\")) )  tibblify(   x,   tspec_df(     tib_int(\"id\"),     tib_chr_vec(\"children\")   ) ) #> # A tibble: 3 × 2 #>      id    children #>   <int> <list<chr>> #> 1     1         [2] #> 2     2         [1] #> 3     3         [3]"},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"object-elements","dir":"Articles","previous_headings":"Specification","what":"Object Elements","title":"tibblify","text":"example gh_repos_small field owner object . specification extract uses tib_row() results tibble column don’t like tibble column can unpack tidyr::unpack(). Alternatively, want extract fields owner can use nested path","code":"gh_repos_small <- purrr::map(gh_repos, ~ .x[c(\"id\", \"name\", \"owner\")]) gh_repos_small <- purrr::map(   gh_repos_small,   function(repo) {     repo$owner <- repo$owner[c(\"login\", \"id\", \"url\")]     repo   } )  gh_repos_small[[1]] #> $id #> [1] 61160198 #>  #> $name #> [1] \"after\" #>  #> $owner #> $owner$login #> [1] \"gaborcsardi\" #>  #> $owner$id #> [1] 660288 #>  #> $owner$url #> [1] \"https://api.github.com/users/gaborcsardi\" spec <- guess_tspec(gh_repos_small) spec #> tspec_df( #>   tib_int(\"id\"), #>   tib_chr(\"name\"), #>   tib_row( #>     \"owner\", #>     tib_chr(\"login\"), #>     tib_int(\"id\"), #>     tib_chr(\"url\"), #>   ), #> ) tibblify(gh_repos_small, spec) #> # A tibble: 30 × 3 #>          id name        owner$login    $id $url                                  #>       <int> <chr>       <chr>        <int> <chr>                                 #>  1 61160198 after       gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  2 40500181 argufy      gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  3 36442442 ask         gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  4 34924886 baseimports gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  5 61620661 citest      gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  6 33907457 clisymbols  gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  7 37236467 cmaker      gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  8 67959624 cmark       gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  9 63152619 conditions  gaborcsardi 660288 https://api.github.com/users/gaborcs… #> 10 24343686 crayon      gaborcsardi 660288 https://api.github.com/users/gaborcs… #> # ℹ 20 more rows spec2 <- tspec_df(   id = tib_int(\"id\"),   name = tib_chr(\"name\"),   owner_id = tib_int(c(\"owner\", \"id\")),   owner_login = tib_chr(c(\"owner\", \"login\")) ) spec2 #> tspec_df( #>   tib_int(\"id\"), #>   tib_chr(\"name\"), #>   owner_id = tib_int(c(\"owner\", \"id\")), #>   owner_login = tib_chr(c(\"owner\", \"login\")), #> )  tibblify(gh_repos_small, spec2) #> # A tibble: 30 × 4 #>          id name        owner_id owner_login #>       <int> <chr>          <int> <chr>       #>  1 61160198 after         660288 gaborcsardi #>  2 40500181 argufy        660288 gaborcsardi #>  3 36442442 ask           660288 gaborcsardi #>  4 34924886 baseimports   660288 gaborcsardi #>  5 61620661 citest        660288 gaborcsardi #>  6 33907457 clisymbols    660288 gaborcsardi #>  7 37236467 cmaker        660288 gaborcsardi #>  8 67959624 cmark         660288 gaborcsardi #>  9 63152619 conditions    660288 gaborcsardi #> 10 24343686 crayon        660288 gaborcsardi #> # ℹ 20 more rows"},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"required-and-optional-fields","dir":"Articles","previous_headings":"","what":"Required and Optional Fields","title":"tibblify","text":"Objects usually fields always exist optional. default tib_*() demands field exists can mark field optional argument required = FALSE: can specify value use fill argument","code":"x <- list(   list(x = 1, y = \"a\"),   list(x = 2) )  spec <- tspec_df(   x = tib_int(\"x\"),   y = tib_chr(\"y\") )  tibblify(x, spec) #> Error in `tibblify()`: #> ! Field y is required but does not exist in `x[[2]]`. #> ℹ Use `required = FALSE` if the field is optional. spec <- tspec_df(   x = tib_int(\"x\"),   y = tib_chr(\"y\", required = FALSE) )  tibblify(x, spec) #> # A tibble: 2 × 2 #>       x y     #>   <int> <chr> #> 1     1 a     #> 2     2 NA spec <- tspec_df(   x = tib_int(\"x\"),   y = tib_chr(\"y\", required = FALSE, fill = \"missing\") )  tibblify(x, spec) #> # A tibble: 2 × 2 #>       x y       #>   <int> <chr>   #> 1     1 a       #> 2     2 missing"},{"path":"https://mgirlich.github.io/tibblify/articles/tibblify.html","id":"converting-a-single-object","dir":"Articles","previous_headings":"","what":"Converting a Single Object","title":"tibblify","text":"rectangle single object two options: tspec_object() produces list tspec_row() produces tibble one row. tibbles great single object often makes sense convert list. example typical API response might something like convert one row tibble necessary wrap data list. access data one use api_output_df$data[[1]] nice. Now accessing data required extra subsetting step","code":"api_output <- list(   status = \"success\",   requested_at = \"2021-10-26 09:17:12\",   data = list(     list(x = 1),     list(x = 2)   ) ) row_spec <- tspec_row(   status = tib_chr(\"status\"),   data = tib_df(     \"data\",     x = tib_int(\"x\")   ) )  api_output_df <- tibblify(api_output, row_spec) api_output_df #> # A tibble: 1 × 2 #>   status                data #>   <chr>   <list<tibble[,1]>> #> 1 success            [2 × 1] object_spec <- tspec_object(   status = tib_chr(\"status\"),   data = tib_df(     \"data\",     x = tib_int(\"x\")   ) )  api_output_list <- tibblify(api_output, object_spec) api_output_list #> $status #> [1] \"success\" #>  #> $data #> # A tibble: 2 × 1 #>       x #>   <int> #> 1     1 #> 2     2 api_output_list$data #> # A tibble: 2 × 1 #>       x #>   <int> #> 1     1 #> 2     2"},{"path":"https://mgirlich.github.io/tibblify/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maximilian Girlich. Author, maintainer, copyright holder. Kirill Müller. Contributor.","code":""},{"path":"https://mgirlich.github.io/tibblify/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Girlich M (2024). tibblify: Rectangle Nested Lists. R package version 0.3.1.9000,  https://mgirlich.github.io/tibblify/, https://github.com/mgirlich/tibblify.","code":"@Manual{,   title = {tibblify: Rectangle Nested Lists},   author = {Maximilian Girlich},   year = {2024},   note = {R package version 0.3.1.9000,  https://mgirlich.github.io/tibblify/},   url = {https://github.com/mgirlich/tibblify}, }"},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"tibblify","dir":"","previous_headings":"","what":"Rectangle Nested Lists","title":"Rectangle Nested Lists","text":"goal tibblify provide easy way converting nested list tibble.","code":""},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Rectangle Nested Lists","text":"can install released version tibblify CRAN : install development version GitHub :","code":"install.packages(\"tibblify\") # install.packages(\"devtools\") devtools::install_github(\"mgirlich/tibblify\")"},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Rectangle Nested Lists","text":"tibblify() can rectangle deeply nested lists tidy tibble. lists might come API form JSON scraping XML. reasons use tibblify() tools like jsonlite::fromJSON() tidyr::hoist() : can guess output format like jsonlite::fromJSON(). can also provide specification rectangle. specification easy understand. can bring inputs shape want single step. Rectangling much faster jsonlite::fromJSON().","code":""},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Rectangle Nested Lists","text":"Let’s start gh_users, list containing information four GitHub users. Quickly rectangling gh_users_small easy applying tibblify() : can now look specification tibblify() used rectangling interested fields can easily adapt specification","code":"library(tibblify)  gh_users_small <- purrr::map(gh_users, ~ .x[c(\"followers\", \"login\", \"url\", \"name\", \"location\", \"email\", \"public_gists\")])  names(gh_users_small[[1]]) #> [1] \"followers\"    \"login\"        \"url\"          \"name\"         \"location\"     #> [6] \"email\"        \"public_gists\" tibblify(gh_users_small) #> The spec contains 1 unspecified field: #> • email #> # A tibble: 4 × 7 #>   followers login      url                    name  location email  public_gists #>       <int> <chr>      <chr>                  <chr> <chr>    <list>        <int> #> 1       780 jennybc    https://api.github.co… Jenn… Vancouv… <NULL>           54 #> 2      3958 jtleek     https://api.github.co… Jeff… Baltimo… <NULL>           12 #> 3       115 juliasilge https://api.github.co… Juli… Salt La… <NULL>            4 #> 4       213 leeper     https://api.github.co… Thom… London,… <NULL>           46 guess_tspec(gh_users_small) #> The spec contains 1 unspecified field: #> • email #> tspec_df( #>   tib_int(\"followers\"), #>   tib_chr(\"login\"), #>   tib_chr(\"url\"), #>   tib_chr(\"name\"), #>   tib_chr(\"location\"), #>   tib_unspecified(\"email\"), #>   tib_int(\"public_gists\"), #> ) spec <- tspec_df(   login_name = tib_chr(\"login\"),   tib_chr(\"name\"),   tib_int(\"public_gists\") )  tibblify(gh_users_small, spec) #> # A tibble: 4 × 3 #>   login_name name                   public_gists #>   <chr>      <chr>                         <int> #> 1 jennybc    Jennifer (Jenny) Bryan           54 #> 2 jtleek     Jeff L.                          12 #> 3 juliasilge Julia Silge                       4 #> 4 leeper     Thomas J. Leeper                 46"},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"objects","dir":"","previous_headings":"","what":"Objects","title":"Rectangle Nested Lists","text":"refer lists like gh_users_small collection objects elements lists. Objects collections typical input tibblify(). Basically, object simply something can converted one row tibble. boils condition names object: object must names (names attribute must NULL), every element must named (name can NA \"\"), names must unique. words, names must fulfill vec_as_names(repair = \"check_unique\"). name-value pairs object fields. example list(x = 1, y = \"\") object fields (x, 1) (y, \"\") list(1, z = 3) object fully named. collection basically just list similar objects fields can become columns tibble.","code":""},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"specification","dir":"","previous_headings":"","what":"Specification","title":"Rectangle Nested Lists","text":"Providing explicit specification couple advantages: can ensure type shape stability resulting tibble automated scripts. can give columns different names. can restrict parsing fields need. can specify happens value missing. seen specification collection done tspec_df(). columns output tibble describe tib_*() functions. describe path field extract output type field. following five types functions: tib_scalar(ptype): length one vector type ptype tib_vector(ptype): vector arbitrary length type ptype tib_variant(): vector arbitrary length type; barely ever need tib_row(...): object fields ... tib_df(...): collection objects fields ... convenience shortcuts tib_scalar() tib_vector() common prototypes: logical(): tib_lgl() tib_lgl_vec() integer(): tib_int() tib_int_vec() double(): tib_dbl() tib_dbl_vec() character(): tib_chr() tib_chr_vec() Date: tib_date() tib_date_vec() Date encoded character: tib_chr_date() tib_chr_date_vec()","code":""},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"scalar-elements","dir":"","previous_headings":"Specification","what":"Scalar Elements","title":"Rectangle Nested Lists","text":"Scalar elements common case result normal vector column tib_scalar() can also provide prototype Let’s say list durations use tib_scalar()","code":"tibblify(   list(     list(id = 1, name = \"Peter\"),     list(id = 2, name = \"Lilly\")   ),   tspec_df(     tib_int(\"id\"),     tib_chr(\"name\")   ) ) #> # A tibble: 2 × 2 #>      id name  #>   <int> <chr> #> 1     1 Peter #> 2     2 Lilly x <- list(   list(id = 1, duration = vctrs::new_duration(100)),   list(id = 2, duration = vctrs::new_duration(200)) ) x #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$duration #> Time difference of 100 secs #>  #>  #> [[2]] #> [[2]]$id #> [1] 2 #>  #> [[2]]$duration #> Time difference of 200 secs tibblify(   x,   tspec_df(     tib_int(\"id\"),     tib_scalar(\"duration\", ptype = vctrs::new_duration())   ) ) #> # A tibble: 2 × 2 #>      id duration #>   <int> <drtn>   #> 1     1 100 secs #> 2     2 200 secs"},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"vector-elements","dir":"","previous_headings":"Specification","what":"Vector Elements","title":"Rectangle Nested Lists","text":"element always size one vector element. still always type ptype produces list ptype column: can use tidyr::unnest() tidyr::unnest_longer() flatten columns regular columns.","code":"x <- list(   list(id = 1, children = c(\"Peter\", \"Lilly\")),   list(id = 2, children = \"James\"),   list(id = 3, children = c(\"Emma\", \"Noah\", \"Charlotte\")) )  tibblify(   x,   tspec_df(     tib_int(\"id\"),     tib_chr_vec(\"children\")   ) ) #> # A tibble: 3 × 2 #>      id    children #>   <int> <list<chr>> #> 1     1         [2] #> 2     2         [1] #> 3     3         [3]"},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"object-elements","dir":"","previous_headings":"Specification","what":"Object Elements","title":"Rectangle Nested Lists","text":"example gh_repos_small field owner object . specification extract uses tib_row() results tibble column don’t like tibble column can unpack tidyr::unpack(). Alternatively, want extract fields owner can use nested path","code":"gh_repos_small <- purrr::map(gh_repos, ~ .x[c(\"id\", \"name\", \"owner\")]) gh_repos_small <- purrr::map(   gh_repos_small,   function(repo) {     repo$owner <- repo$owner[c(\"login\", \"id\", \"url\")]     repo   } )  gh_repos_small[[1]] #> $id #> [1] 61160198 #>  #> $name #> [1] \"after\" #>  #> $owner #> $owner$login #> [1] \"gaborcsardi\" #>  #> $owner$id #> [1] 660288 #>  #> $owner$url #> [1] \"https://api.github.com/users/gaborcsardi\" spec <- guess_tspec(gh_repos_small) spec #> tspec_df( #>   tib_int(\"id\"), #>   tib_chr(\"name\"), #>   tib_row( #>     \"owner\", #>     tib_chr(\"login\"), #>     tib_int(\"id\"), #>     tib_chr(\"url\"), #>   ), #> ) tibblify(gh_repos_small, spec) #> # A tibble: 30 × 3 #>          id name        owner$login    $id $url                                  #>       <int> <chr>       <chr>        <int> <chr>                                 #>  1 61160198 after       gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  2 40500181 argufy      gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  3 36442442 ask         gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  4 34924886 baseimports gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  5 61620661 citest      gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  6 33907457 clisymbols  gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  7 37236467 cmaker      gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  8 67959624 cmark       gaborcsardi 660288 https://api.github.com/users/gaborcs… #>  9 63152619 conditions  gaborcsardi 660288 https://api.github.com/users/gaborcs… #> 10 24343686 crayon      gaborcsardi 660288 https://api.github.com/users/gaborcs… #> # ℹ 20 more rows spec2 <- tspec_df(   id = tib_int(\"id\"),   name = tib_chr(\"name\"),   owner_id = tib_int(c(\"owner\", \"id\")),   owner_login = tib_chr(c(\"owner\", \"login\")) ) spec2 #> tspec_df( #>   tib_int(\"id\"), #>   tib_chr(\"name\"), #>   owner_id = tib_int(c(\"owner\", \"id\")), #>   owner_login = tib_chr(c(\"owner\", \"login\")), #> )  tibblify(gh_repos_small, spec2) #> # A tibble: 30 × 4 #>          id name        owner_id owner_login #>       <int> <chr>          <int> <chr>       #>  1 61160198 after         660288 gaborcsardi #>  2 40500181 argufy        660288 gaborcsardi #>  3 36442442 ask           660288 gaborcsardi #>  4 34924886 baseimports   660288 gaborcsardi #>  5 61620661 citest        660288 gaborcsardi #>  6 33907457 clisymbols    660288 gaborcsardi #>  7 37236467 cmaker        660288 gaborcsardi #>  8 67959624 cmark         660288 gaborcsardi #>  9 63152619 conditions    660288 gaborcsardi #> 10 24343686 crayon        660288 gaborcsardi #> # ℹ 20 more rows"},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"required-and-optional-fields","dir":"","previous_headings":"","what":"Required and Optional Fields","title":"Rectangle Nested Lists","text":"Objects usually fields always exist optional. default tib_*() demands field exists can mark field optional argument required = FALSE: can specify value use fill argument","code":"x <- list(   list(x = 1, y = \"a\"),   list(x = 2) )  spec <- tspec_df(   x = tib_int(\"x\"),   y = tib_chr(\"y\") )  tibblify(x, spec) #> Error in `tibblify()`: #> ! Field y is required but does not exist in `x[[2]]`. #> ℹ Use `required = FALSE` if the field is optional. spec <- tspec_df(   x = tib_int(\"x\"),   y = tib_chr(\"y\", required = FALSE) )  tibblify(x, spec) #> # A tibble: 2 × 2 #>       x y     #>   <int> <chr> #> 1     1 a     #> 2     2 <NA> spec <- tspec_df(   x = tib_int(\"x\"),   y = tib_chr(\"y\", required = FALSE, fill = \"missing\") )  tibblify(x, spec) #> # A tibble: 2 × 2 #>       x y       #>   <int> <chr>   #> 1     1 a       #> 2     2 missing"},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"converting-a-single-object","dir":"","previous_headings":"","what":"Converting a Single Object","title":"Rectangle Nested Lists","text":"rectangle single object two options: tspec_object() produces list tspec_row() produces tibble one row. tibbles great single object often makes sense convert list. example typical API response might something like convert one row tibble necessary wrap data list. access data one use api_output_df$data[[1]] nice. Now accessing data required extra subsetting step","code":"api_output <- list(   status = \"success\",   requested_at = \"2021-10-26 09:17:12\",   data = list(     list(x = 1),     list(x = 2)   ) ) row_spec <- tspec_row(   status = tib_chr(\"status\"),   data = tib_df(     \"data\",     x = tib_int(\"x\")   ) )  api_output_df <- tibblify(api_output, row_spec) api_output_df #> # A tibble: 1 × 2 #>   status                data #>   <chr>   <list<tibble[,1]>> #> 1 success            [2 × 1] object_spec <- tspec_object(   status = tib_chr(\"status\"),   data = tib_df(     \"data\",     x = tib_int(\"x\")   ) )  api_output_list <- tibblify(api_output, object_spec) api_output_list #> $status #> [1] \"success\" #>  #> $data #> # A tibble: 2 × 1 #>       x #>   <int> #> 1     1 #> 2     2 api_output_list$data #> # A tibble: 2 × 1 #>       x #>   <int> #> 1     1 #> 2     2"},{"path":"https://mgirlich.github.io/tibblify/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Rectangle Nested Lists","text":"Please note tibblify project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/formatting.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing tibblify specifications — formatting","title":"Printing tibblify specifications — formatting","text":"Printing tibblify specifications","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/formatting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing tibblify specifications — formatting","text":"","code":"# S3 method for tspec print(x, width = NULL, ..., names = NULL)  # S3 method for tspec_df format(x, width = NULL, ..., names = NULL)"},{"path":"https://mgirlich.github.io/tibblify/reference/formatting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing tibblify specifications — formatting","text":"x Spec format print width Width text output generate. ... dots future extensions must empty. names names printed even can deduced spec?","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/formatting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing tibblify specifications — formatting","text":"x returned invisibly.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/formatting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing tibblify specifications — formatting","text":"","code":"spec <- tspec_df(   a = tib_int(\"a\"),   new_name = tib_chr(\"b\"),   row = tib_row(     \"row\",     x = tib_int(\"x\")   ) ) print(spec, names = FALSE) #> tspec_df( #>   tib_int(\"a\"), #>   new_name = tib_chr(\"b\"), #>   tib_row( #>     \"row\", #>     tib_int(\"x\"), #>   ), #> ) print(spec, names = TRUE) #> tspec_df( #>   a = tib_int(\"a\"), #>   new_name = tib_chr(\"b\"), #>   row = tib_row( #>     \"row\", #>     tib_int(\"x\"), #>   ), #> )"},{"path":"https://mgirlich.github.io/tibblify/reference/get_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Examine the column specification — get_spec","title":"Examine the column specification — get_spec","text":"Examine column specification","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/get_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examine the column specification — get_spec","text":"","code":"get_spec(x)"},{"path":"https://mgirlich.github.io/tibblify/reference/get_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examine the column specification — get_spec","text":"x data frame object extract .","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/get_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examine the column specification — get_spec","text":"tibblify specification object.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/get_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Examine the column specification — get_spec","text":"","code":"df <- tibblify(list(list(x = 1, y = \"a\"), list(x = 2))) get_spec(df) #> tspec_df( #>   tib_dbl(\"x\"), #>   tib_chr(\"y\", required = FALSE), #> )"},{"path":"https://mgirlich.github.io/tibblify/reference/gh_repos.html","id":null,"dir":"Reference","previous_headings":"","what":"GitHub Repositories — gh_repos","title":"GitHub Repositories — gh_repos","text":"dataset containing basic information GitHub repositories.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/gh_repos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GitHub Repositories — gh_repos","text":"","code":"gh_repos"},{"path":"https://mgirlich.github.io/tibblify/reference/gh_repos.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GitHub Repositories — gh_repos","text":"list lists.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/gh_users.html","id":null,"dir":"Reference","previous_headings":"","what":"GitHub Users — gh_users","title":"GitHub Users — gh_users","text":"dataset containing basic information six GitHub users.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/gh_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GitHub Users — gh_users","text":"","code":"gh_users"},{"path":"https://mgirlich.github.io/tibblify/reference/gh_users.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GitHub Users — gh_users","text":"list lists.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/got_chars.html","id":null,"dir":"Reference","previous_headings":"","what":"Game of Thrones POV characters — got_chars","title":"Game of Thrones POV characters — got_chars","text":"data repurrrsive package.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/got_chars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Game of Thrones POV characters — got_chars","text":"","code":"got_chars"},{"path":"https://mgirlich.github.io/tibblify/reference/got_chars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Game of Thrones POV characters — got_chars","text":"unnamed list 30 components, representing POV character. character's component named list length 18, containing information name, aliases, house allegiances.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/got_chars.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Game of Thrones POV characters — got_chars","text":"https://anapioficeandfire.com","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/got_chars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Game of Thrones POV characters — got_chars","text":"Info point--view (POV) characters first five books Song Ice Fire series George R. R. Martin. Retrieved API Ice Fire.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/got_chars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Game of Thrones POV characters — got_chars","text":"","code":"got_chars #> [[1]] #> [[1]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1022\" #>  #> [[1]]$id #> [1] 1022 #>  #> [[1]]$name #> [1] \"Theon Greyjoy\" #>  #> [[1]]$gender #> [1] \"Male\" #>  #> [[1]]$culture #> [1] \"Ironborn\" #>  #> [[1]]$born #> [1] \"In 278 AC or 279 AC, at Pyke\" #>  #> [[1]]$died #> [1] \"\" #>  #> [[1]]$alive #> [1] TRUE #>  #> [[1]]$titles #> [1] \"Prince of Winterfell\"                                 #> [2] \"Captain of Sea Bitch\"                                 #> [3] \"Lord of the Iron Islands (by law of the green lands)\" #>  #> [[1]]$aliases #> [1] \"Prince of Fools\" \"Theon Turncloak\" \"Reek\"            \"Theon Kinslayer\" #>  #> [[1]]$father #> [1] \"\" #>  #> [[1]]$mother #> [1] \"\" #>  #> [[1]]$spouse #> [1] \"\" #>  #> [[1]]$allegiances #> [1] \"House Greyjoy of Pyke\" #>  #> [[1]]$books #> [1] \"A Game of Thrones\" \"A Storm of Swords\" \"A Feast for Crows\" #>  #> [[1]]$povBooks #> [1] \"A Clash of Kings\"     \"A Dance with Dragons\" #>  #> [[1]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[1]]$playedBy #> [1] \"Alfie Allen\" #>  #>  #> [[2]] #> [[2]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1052\" #>  #> [[2]]$id #> [1] 1052 #>  #> [[2]]$name #> [1] \"Tyrion Lannister\" #>  #> [[2]]$gender #> [1] \"Male\" #>  #> [[2]]$culture #> [1] \"\" #>  #> [[2]]$born #> [1] \"In 273 AC, at Casterly Rock\" #>  #> [[2]]$died #> [1] \"\" #>  #> [[2]]$alive #> [1] TRUE #>  #> [[2]]$titles #> [1] \"Acting Hand of the King (former)\" \"Master of Coin (former)\"          #>  #> [[2]]$aliases #>  [1] \"The Imp\"            \"Halfman\"            \"The boyman\"         #>  [4] \"Giant of Lannister\" \"Lord Tywin's Doom\"  \"Lord Tywin's Bane\"  #>  [7] \"Yollo\"              \"Hugor Hill\"         \"No-Nose\"            #> [10] \"Freak\"              \"Dwarf\"              #>  #> [[2]]$father #> [1] \"\" #>  #> [[2]]$mother #> [1] \"\" #>  #> [[2]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/2044\" #>  #> [[2]]$allegiances #> [1] \"House Lannister of Casterly Rock\" #>  #> [[2]]$books #> [1] \"A Feast for Crows\"         \"The World of Ice and Fire\" #>  #> [[2]]$povBooks #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Storm of Swords\"    #> [4] \"A Dance with Dragons\" #>  #> [[2]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[2]]$playedBy #> [1] \"Peter Dinklage\" #>  #>  #> [[3]] #> [[3]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1074\" #>  #> [[3]]$id #> [1] 1074 #>  #> [[3]]$name #> [1] \"Victarion Greyjoy\" #>  #> [[3]]$gender #> [1] \"Male\" #>  #> [[3]]$culture #> [1] \"Ironborn\" #>  #> [[3]]$born #> [1] \"In 268 AC or before, at Pyke\" #>  #> [[3]]$died #> [1] \"\" #>  #> [[3]]$alive #> [1] TRUE #>  #> [[3]]$titles #> [1] \"Lord Captain of the Iron Fleet\" \"Master of the Iron Victory\"     #>  #> [[3]]$aliases #> [1] \"The Iron Captain\" #>  #> [[3]]$father #> [1] \"\" #>  #> [[3]]$mother #> [1] \"\" #>  #> [[3]]$spouse #> [1] \"\" #>  #> [[3]]$allegiances #> [1] \"House Greyjoy of Pyke\" #>  #> [[3]]$books #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  \"A Storm of Swords\" #>  #> [[3]]$povBooks #> [1] \"A Feast for Crows\"    \"A Dance with Dragons\" #>  #> [[3]]$tvSeries #> [1] \"\" #>  #> [[3]]$playedBy #> [1] \"\" #>  #>  #> [[4]] #> [[4]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1109\" #>  #> [[4]]$id #> [1] 1109 #>  #> [[4]]$name #> [1] \"Will\" #>  #> [[4]]$gender #> [1] \"Male\" #>  #> [[4]]$culture #> [1] \"\" #>  #> [[4]]$born #> [1] \"\" #>  #> [[4]]$died #> [1] \"In 297 AC, at Haunted Forest\" #>  #> [[4]]$alive #> [1] FALSE #>  #> [[4]]$titles #> [1] \"\" #>  #> [[4]]$aliases #> [1] \"\" #>  #> [[4]]$father #> [1] \"\" #>  #> [[4]]$mother #> [1] \"\" #>  #> [[4]]$spouse #> [1] \"\" #>  #> [[4]]$allegiances #> list() #>  #> [[4]]$books #> [1] \"A Clash of Kings\" #>  #> [[4]]$povBooks #> [1] \"A Game of Thrones\" #>  #> [[4]]$tvSeries #> [1] \"\" #>  #> [[4]]$playedBy #> [1] \"Bronson Webb\" #>  #>  #> [[5]] #> [[5]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1166\" #>  #> [[5]]$id #> [1] 1166 #>  #> [[5]]$name #> [1] \"Areo Hotah\" #>  #> [[5]]$gender #> [1] \"Male\" #>  #> [[5]]$culture #> [1] \"Norvoshi\" #>  #> [[5]]$born #> [1] \"In 257 AC or before, at Norvos\" #>  #> [[5]]$died #> [1] \"\" #>  #> [[5]]$alive #> [1] TRUE #>  #> [[5]]$titles #> [1] \"Captain of the Guard at Sunspear\" #>  #> [[5]]$aliases #> [1] \"\" #>  #> [[5]]$father #> [1] \"\" #>  #> [[5]]$mother #> [1] \"\" #>  #> [[5]]$spouse #> [1] \"\" #>  #> [[5]]$allegiances #> [1] \"House Nymeros Martell of Sunspear\" #>  #> [[5]]$books #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  \"A Storm of Swords\" #>  #> [[5]]$povBooks #> [1] \"A Feast for Crows\"    \"A Dance with Dragons\" #>  #> [[5]]$tvSeries #> [1] \"Season 5\" \"Season 6\" #>  #> [[5]]$playedBy #> [1] \"DeObia Oparei\" #>  #>  #> [[6]] #> [[6]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1267\" #>  #> [[6]]$id #> [1] 1267 #>  #> [[6]]$name #> [1] \"Chett\" #>  #> [[6]]$gender #> [1] \"Male\" #>  #> [[6]]$culture #> [1] \"\" #>  #> [[6]]$born #> [1] \"At Hag's Mire\" #>  #> [[6]]$died #> [1] \"In 299 AC, at Fist of the First Men\" #>  #> [[6]]$alive #> [1] FALSE #>  #> [[6]]$titles #> [1] \"\" #>  #> [[6]]$aliases #> [1] \"\" #>  #> [[6]]$father #> [1] \"\" #>  #> [[6]]$mother #> [1] \"\" #>  #> [[6]]$spouse #> [1] \"\" #>  #> [[6]]$allegiances #> list() #>  #> [[6]]$books #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  #>  #> [[6]]$povBooks #> [1] \"A Storm of Swords\" #>  #> [[6]]$tvSeries #> [1] \"\" #>  #> [[6]]$playedBy #> [1] \"\" #>  #>  #> [[7]] #> [[7]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1295\" #>  #> [[7]]$id #> [1] 1295 #>  #> [[7]]$name #> [1] \"Cressen\" #>  #> [[7]]$gender #> [1] \"Male\" #>  #> [[7]]$culture #> [1] \"\" #>  #> [[7]]$born #> [1] \"In 219 AC or 220 AC\" #>  #> [[7]]$died #> [1] \"In 299 AC, at Dragonstone\" #>  #> [[7]]$alive #> [1] FALSE #>  #> [[7]]$titles #> [1] \"Maester\" #>  #> [[7]]$aliases #> [1] \"\" #>  #> [[7]]$father #> [1] \"\" #>  #> [[7]]$mother #> [1] \"\" #>  #> [[7]]$spouse #> [1] \"\" #>  #> [[7]]$allegiances #> list() #>  #> [[7]]$books #> [1] \"A Storm of Swords\" \"A Feast for Crows\" #>  #> [[7]]$povBooks #> [1] \"A Clash of Kings\" #>  #> [[7]]$tvSeries #> [1] \"Season 2\" #>  #> [[7]]$playedBy #> [1] \"Oliver Ford\" #>  #>  #> [[8]] #> [[8]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/130\" #>  #> [[8]]$id #> [1] 130 #>  #> [[8]]$name #> [1] \"Arianne Martell\" #>  #> [[8]]$gender #> [1] \"Female\" #>  #> [[8]]$culture #> [1] \"Dornish\" #>  #> [[8]]$born #> [1] \"In 276 AC, at Sunspear\" #>  #> [[8]]$died #> [1] \"\" #>  #> [[8]]$alive #> [1] TRUE #>  #> [[8]]$titles #> [1] \"Princess of Dorne\" #>  #> [[8]]$aliases #> [1] \"\" #>  #> [[8]]$father #> [1] \"\" #>  #> [[8]]$mother #> [1] \"\" #>  #> [[8]]$spouse #> [1] \"\" #>  #> [[8]]$allegiances #> [1] \"House Nymeros Martell of Sunspear\" #>  #> [[8]]$books #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Storm of Swords\"    #> [4] \"A Dance with Dragons\" #>  #> [[8]]$povBooks #> [1] \"A Feast for Crows\" #>  #> [[8]]$tvSeries #> [1] \"\" #>  #> [[8]]$playedBy #> [1] \"\" #>  #>  #> [[9]] #> [[9]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1303\" #>  #> [[9]]$id #> [1] 1303 #>  #> [[9]]$name #> [1] \"Daenerys Targaryen\" #>  #> [[9]]$gender #> [1] \"Female\" #>  #> [[9]]$culture #> [1] \"Valyrian\" #>  #> [[9]]$born #> [1] \"In 284 AC, at Dragonstone\" #>  #> [[9]]$died #> [1] \"\" #>  #> [[9]]$alive #> [1] TRUE #>  #> [[9]]$titles #> [1] \"Queen of the Andals and the Rhoynar and the First Men, Lord of the Seven Kingdoms\" #> [2] \"Khaleesi of the Great Grass Sea\"                                                   #> [3] \"Breaker of Shackles/Chains\"                                                        #> [4] \"Queen of Meereen\"                                                                  #> [5] \"Princess of Dragonstone\"                                                           #>  #> [[9]]$aliases #>  [1] \"Dany\"                    \"Daenerys Stormborn\"      #>  [3] \"The Unburnt\"             \"Mother of Dragons\"       #>  [5] \"Mother\"                  \"Mhysa\"                   #>  [7] \"The Silver Queen\"        \"Silver Lady\"             #>  [9] \"Dragonmother\"            \"The Dragon Queen\"        #> [11] \"The Mad King's daughter\" #>  #> [[9]]$father #> [1] \"\" #>  #> [[9]]$mother #> [1] \"\" #>  #> [[9]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/1346\" #>  #> [[9]]$allegiances #> [1] \"House Targaryen of King's Landing\" #>  #> [[9]]$books #> [1] \"A Feast for Crows\" #>  #> [[9]]$povBooks #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Storm of Swords\"    #> [4] \"A Dance with Dragons\" #>  #> [[9]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[9]]$playedBy #> [1] \"Emilia Clarke\" #>  #>  #> [[10]] #> [[10]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/1319\" #>  #> [[10]]$id #> [1] 1319 #>  #> [[10]]$name #> [1] \"Davos Seaworth\" #>  #> [[10]]$gender #> [1] \"Male\" #>  #> [[10]]$culture #> [1] \"Westeros\" #>  #> [[10]]$born #> [1] \"In 260 AC or before, at King's Landing\" #>  #> [[10]]$died #> [1] \"\" #>  #> [[10]]$alive #> [1] TRUE #>  #> [[10]]$titles #> [1] \"Ser\"                       \"Lord of the Rainwood\"      #> [3] \"Admiral of the Narrow Sea\" \"Hand of the King\"          #>  #> [[10]]$aliases #> [1] \"Onion Knight\"    \"Davos Shorthand\" \"Ser Onions\"      \"Onion Lord\"      #> [5] \"Smuggler\"        #>  #> [[10]]$father #> [1] \"\" #>  #> [[10]]$mother #> [1] \"\" #>  #> [[10]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/1676\" #>  #> [[10]]$allegiances #> [1] \"House Baratheon of Dragonstone\" \"House Seaworth of Cape Wrath\"   #>  #> [[10]]$books #> [1] \"A Feast for Crows\" #>  #> [[10]]$povBooks #> [1] \"A Clash of Kings\"     \"A Storm of Swords\"    \"A Dance with Dragons\" #>  #> [[10]]$tvSeries #> [1] \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[10]]$playedBy #> [1] \"Liam Cunningham\" #>  #>  #> [[11]] #> [[11]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/148\" #>  #> [[11]]$id #> [1] 148 #>  #> [[11]]$name #> [1] \"Arya Stark\" #>  #> [[11]]$gender #> [1] \"Female\" #>  #> [[11]]$culture #> [1] \"Northmen\" #>  #> [[11]]$born #> [1] \"In 289 AC, at Winterfell\" #>  #> [[11]]$died #> [1] \"\" #>  #> [[11]]$alive #> [1] TRUE #>  #> [[11]]$titles #> [1] \"Princess\" #>  #> [[11]]$aliases #>  [1] \"Arya Horseface\"       \"Arya Underfoot\"       \"Arry\"                 #>  [4] \"Lumpyface\"            \"Lumpyhead\"            \"Stickboy\"             #>  [7] \"Weasel\"               \"Nymeria\"              \"Squan\"                #> [10] \"Saltb\"                \"Cat of the Canaly\"    \"Bets\"                 #> [13] \"The Blind Girh\"       \"The Ugly Little Girl\" \"Mercedenl\"            #> [16] \"Mercye\"               #>  #> [[11]]$father #> [1] \"\" #>  #> [[11]]$mother #> [1] \"\" #>  #> [[11]]$spouse #> [1] \"\" #>  #> [[11]]$allegiances #> [1] \"House Stark of Winterfell\" #>  #> [[11]]$books #> list() #>  #> [[11]]$povBooks #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Storm of Swords\"    #> [4] \"A Feast for Crows\"    \"A Dance with Dragons\" #>  #> [[11]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[11]]$playedBy #> [1] \"Maisie Williams\" #>  #>  #> [[12]] #> [[12]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/149\" #>  #> [[12]]$id #> [1] 149 #>  #> [[12]]$name #> [1] \"Arys Oakheart\" #>  #> [[12]]$gender #> [1] \"Male\" #>  #> [[12]]$culture #> [1] \"Reach\" #>  #> [[12]]$born #> [1] \"At Old Oak\" #>  #> [[12]]$died #> [1] \"In 300 AC, at the Greenblood\" #>  #> [[12]]$alive #> [1] FALSE #>  #> [[12]]$titles #> [1] \"Ser\" #>  #> [[12]]$aliases #> [1] \"\" #>  #> [[12]]$father #> [1] \"\" #>  #> [[12]]$mother #> [1] \"\" #>  #> [[12]]$spouse #> [1] \"\" #>  #> [[12]]$allegiances #> [1] \"House Oakheart of Old Oak\" #>  #> [[12]]$books #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Storm of Swords\"    #> [4] \"A Dance with Dragons\" #>  #> [[12]]$povBooks #> [1] \"A Feast for Crows\" #>  #> [[12]]$tvSeries #> [1] \"\" #>  #> [[12]]$playedBy #> [1] \"\" #>  #>  #> [[13]] #> [[13]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/150\" #>  #> [[13]]$id #> [1] 150 #>  #> [[13]]$name #> [1] \"Asha Greyjoy\" #>  #> [[13]]$gender #> [1] \"Female\" #>  #> [[13]]$culture #> [1] \"Ironborn\" #>  #> [[13]]$born #> [1] \"In 275 AC or 276 AC, at Pyke\" #>  #> [[13]]$died #> [1] \"\" #>  #> [[13]]$alive #> [1] TRUE #>  #> [[13]]$titles #> [1] \"Princess\"                    \"Captain of the Black Wind\"   #> [3] \"Conqueror of Deepwood Motte\" #>  #> [[13]]$aliases #> [1] \"Esgred\"                \"The Kraken's Daughter\" #>  #> [[13]]$father #> [1] \"\" #>  #> [[13]]$mother #> [1] \"\" #>  #> [[13]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/1372\" #>  #> [[13]]$allegiances #> [1] \"House Greyjoy of Pyke\" \"House Ironmaker\"       #>  #> [[13]]$books #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  #>  #> [[13]]$povBooks #> [1] \"A Feast for Crows\"    \"A Dance with Dragons\" #>  #> [[13]]$tvSeries #> [1] \"Season 2\" \"Season 3\" \"Season 4\" #>  #> [[13]]$playedBy #> [1] \"Gemma Whelan\" #>  #>  #> [[14]] #> [[14]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/168\" #>  #> [[14]]$id #> [1] 168 #>  #> [[14]]$name #> [1] \"Barristan Selmy\" #>  #> [[14]]$gender #> [1] \"Male\" #>  #> [[14]]$culture #> [1] \"Westeros\" #>  #> [[14]]$born #> [1] \"In 237 AC\" #>  #> [[14]]$died #> [1] \"\" #>  #> [[14]]$alive #> [1] TRUE #>  #> [[14]]$titles #> [1] \"Ser\"               \"Hand of the Queen\" #>  #> [[14]]$aliases #> [1] \"Barristan the Bold\" \"Arstan Whitebeard\"  \"Ser Grandfather\"    #> [4] \"Barristan the Old\"  \"Old Ser\"            #>  #> [[14]]$father #> [1] \"\" #>  #> [[14]]$mother #> [1] \"\" #>  #> [[14]]$spouse #> [1] \"\" #>  #> [[14]]$allegiances #> [1] \"House Selmy of Harvest Hall\"       \"House Targaryen of King's Landing\" #>  #> [[14]]$books #> [1] \"A Game of Thrones\"         \"A Clash of Kings\"          #> [3] \"A Storm of Swords\"         \"A Feast for Crows\"         #> [5] \"The World of Ice and Fire\" #>  #> [[14]]$povBooks #> [1] \"A Dance with Dragons\" #>  #> [[14]]$tvSeries #> [1] \"Season 1\" \"Season 3\" \"Season 4\" \"Season 5\" #>  #> [[14]]$playedBy #> [1] \"Ian McElhinney\" #>  #>  #> [[15]] #> [[15]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/2066\" #>  #> [[15]]$id #> [1] 2066 #>  #> [[15]]$name #> [1] \"Varamyr\" #>  #> [[15]]$gender #> [1] \"Male\" #>  #> [[15]]$culture #> [1] \"Free Folk\" #>  #> [[15]]$born #> [1] \"At a village Beyond the Wall\" #>  #> [[15]]$died #> [1] \"In 300 AC, at a village Beyond the Wall\" #>  #> [[15]]$alive #> [1] FALSE #>  #> [[15]]$titles #> [1] \"\" #>  #> [[15]]$aliases #> [1] \"Varamyr Sixskins\" \"Haggon\"           \"Lump\"             #>  #> [[15]]$father #> [1] \"\" #>  #> [[15]]$mother #> [1] \"\" #>  #> [[15]]$spouse #> [1] \"\" #>  #> [[15]]$allegiances #> list() #>  #> [[15]]$books #> [1] \"A Storm of Swords\" #>  #> [[15]]$povBooks #> [1] \"A Dance with Dragons\" #>  #> [[15]]$tvSeries #> [1] \"\" #>  #> [[15]]$playedBy #> [1] \"\" #>  #>  #> [[16]] #> [[16]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/208\" #>  #> [[16]]$id #> [1] 208 #>  #> [[16]]$name #> [1] \"Brandon Stark\" #>  #> [[16]]$gender #> [1] \"Male\" #>  #> [[16]]$culture #> [1] \"Northmen\" #>  #> [[16]]$born #> [1] \"In 290 AC, at Winterfell\" #>  #> [[16]]$died #> [1] \"\" #>  #> [[16]]$alive #> [1] TRUE #>  #> [[16]]$titles #> [1] \"Prince of Winterfell\" #>  #> [[16]]$aliases #> [1] \"Bran\"            \"Bran the Broken\" \"The Winged Wolf\" #>  #> [[16]]$father #> [1] \"\" #>  #> [[16]]$mother #> [1] \"\" #>  #> [[16]]$spouse #> [1] \"\" #>  #> [[16]]$allegiances #> [1] \"House Stark of Winterfell\" #>  #> [[16]]$books #> [1] \"A Feast for Crows\" #>  #> [[16]]$povBooks #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Storm of Swords\"    #> [4] \"A Dance with Dragons\" #>  #> [[16]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 6\" #>  #> [[16]]$playedBy #> [1] \"Isaac Hempstead-Wright\" #>  #>  #> [[17]] #> [[17]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/216\" #>  #> [[17]]$id #> [1] 216 #>  #> [[17]]$name #> [1] \"Brienne of Tarth\" #>  #> [[17]]$gender #> [1] \"Female\" #>  #> [[17]]$culture #> [1] \"\" #>  #> [[17]]$born #> [1] \"In 280 AC\" #>  #> [[17]]$died #> [1] \"\" #>  #> [[17]]$alive #> [1] TRUE #>  #> [[17]]$titles #> [1] \"\" #>  #> [[17]]$aliases #> [1] \"The Maid of Tarth\"  \"Brienne the Beauty\" \"Brienne the Blue\"   #>  #> [[17]]$father #> [1] \"\" #>  #> [[17]]$mother #> [1] \"\" #>  #> [[17]]$spouse #> [1] \"\" #>  #> [[17]]$allegiances #> [1] \"House Baratheon of Storm's End\" \"House Stark of Winterfell\"      #> [3] \"House Tarth of Evenfall Hall\"   #>  #> [[17]]$books #> [1] \"A Clash of Kings\"     \"A Storm of Swords\"    \"A Dance with Dragons\" #>  #> [[17]]$povBooks #> [1] \"A Feast for Crows\" #>  #> [[17]]$tvSeries #> [1] \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[17]]$playedBy #> [1] \"Gwendoline Christie\" #>  #>  #> [[18]] #> [[18]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/232\" #>  #> [[18]]$id #> [1] 232 #>  #> [[18]]$name #> [1] \"Catelyn Stark\" #>  #> [[18]]$gender #> [1] \"Female\" #>  #> [[18]]$culture #> [1] \"Rivermen\" #>  #> [[18]]$born #> [1] \"In 264 AC, at Riverrun\" #>  #> [[18]]$died #> [1] \"In 299 AC, at the Twins\" #>  #> [[18]]$alive #> [1] FALSE #>  #> [[18]]$titles #> [1] \"Lady of Winterfell\" #>  #> [[18]]$aliases #> [1] \"Catelyn Tully\"     \"Lady Stoneheart\"   \"The Silent Sistet\" #> [4] \"Mother Mercilesr\"  \"The Hangwomans\"    #>  #> [[18]]$father #> [1] \"\" #>  #> [[18]]$mother #> [1] \"\" #>  #> [[18]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/339\" #>  #> [[18]]$allegiances #> [1] \"House Stark of Winterfell\" \"House Tully of Riverrun\"   #>  #> [[18]]$books #> [1] \"A Feast for Crows\"    \"A Dance with Dragons\" #>  #> [[18]]$povBooks #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  \"A Storm of Swords\" #>  #> [[18]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" #>  #> [[18]]$playedBy #> [1] \"Michelle Fairley\" #>  #>  #> [[19]] #> [[19]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/238\" #>  #> [[19]]$id #> [1] 238 #>  #> [[19]]$name #> [1] \"Cersei Lannister\" #>  #> [[19]]$gender #> [1] \"Female\" #>  #> [[19]]$culture #> [1] \"Westerman\" #>  #> [[19]]$born #> [1] \"In 266 AC, at Casterly Rock\" #>  #> [[19]]$died #> [1] \"\" #>  #> [[19]]$alive #> [1] TRUE #>  #> [[19]]$titles #> [1] \"Light of the West\"      \"Queen Dowager\"          \"Protector of the Realm\" #> [4] \"Lady of Casterly Rock\"  \"Queen Regent\"           #>  #> [[19]]$aliases #> list() #>  #> [[19]]$father #> [1] \"\" #>  #> [[19]]$mother #> [1] \"\" #>  #> [[19]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/901\" #>  #> [[19]]$allegiances #> [1] \"House Lannister of Casterly Rock\" #>  #> [[19]]$books #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  \"A Storm of Swords\" #>  #> [[19]]$povBooks #> [1] \"A Feast for Crows\"    \"A Dance with Dragons\" #>  #> [[19]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[19]]$playedBy #> [1] \"Lena Headey\" #>  #>  #> [[20]] #> [[20]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/339\" #>  #> [[20]]$id #> [1] 339 #>  #> [[20]]$name #> [1] \"Eddard Stark\" #>  #> [[20]]$gender #> [1] \"Male\" #>  #> [[20]]$culture #> [1] \"Northmen\" #>  #> [[20]]$born #> [1] \"In 263 AC, at Winterfell\" #>  #> [[20]]$died #> [1] \"In 299 AC, at Great Sept of Baelor in King's Landing\" #>  #> [[20]]$alive #> [1] FALSE #>  #> [[20]]$titles #> [1] \"Lord of Winterfell\"     \"Warden of the North\"    \"Hand of the King\"       #> [4] \"Protector of the Realm\" \"Regent\"                 #>  #> [[20]]$aliases #> [1] \"Ned\"            \"The Ned\"        \"The Quiet Wolf\" #>  #> [[20]]$father #> [1] \"\" #>  #> [[20]]$mother #> [1] \"\" #>  #> [[20]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/232\" #>  #> [[20]]$allegiances #> [1] \"House Stark of Winterfell\" #>  #> [[20]]$books #> [1] \"A Clash of Kings\"          \"A Storm of Swords\"         #> [3] \"A Feast for Crows\"         \"A Dance with Dragons\"      #> [5] \"The World of Ice and Fire\" #>  #> [[20]]$povBooks #> [1] \"A Game of Thrones\" #>  #> [[20]]$tvSeries #> [1] \"Season 1\" \"Season 6\" #>  #> [[20]]$playedBy #> [1] \"Sean Bean\"       \"Sebastian Croft\" \"Robert Aramayo\"  #>  #>  #> [[21]] #> [[21]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/529\" #>  #> [[21]]$id #> [1] 529 #>  #> [[21]]$name #> [1] \"Jaime Lannister\" #>  #> [[21]]$gender #> [1] \"Male\" #>  #> [[21]]$culture #> [1] \"Westerlands\" #>  #> [[21]]$born #> [1] \"In 266 AC, at Casterly Rock\" #>  #> [[21]]$died #> [1] \"\" #>  #> [[21]]$alive #> [1] TRUE #>  #> [[21]]$titles #> [1] \"Ser\"                              \"Lord Commander of the Kingsguard\" #> [3] \"Warden of the East (formerly)\"    #>  #> [[21]]$aliases #> [1] \"The Kingslayer\"        \"The Lion of Lannister\" \"The Young Lion\"        #> [4] \"Cripple\"               #>  #> [[21]]$father #> [1] \"\" #>  #> [[21]]$mother #> [1] \"\" #>  #> [[21]]$spouse #> [1] \"\" #>  #> [[21]]$allegiances #> [1] \"House Lannister of Casterly Rock\" #>  #> [[21]]$books #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  #>  #> [[21]]$povBooks #> [1] \"A Storm of Swords\"    \"A Feast for Crows\"    \"A Dance with Dragons\" #>  #> [[21]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" #>  #> [[21]]$playedBy #> [1] \"Nikolaj Coster-Waldau\" #>  #>  #> [[22]] #> [[22]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/576\" #>  #> [[22]]$id #> [1] 576 #>  #> [[22]]$name #> [1] \"Jon Connington\" #>  #> [[22]]$gender #> [1] \"Male\" #>  #> [[22]]$culture #> [1] \"Stormlands\" #>  #> [[22]]$born #> [1] \"In or between 263 AC and 265 AC\" #>  #> [[22]]$died #> [1] \"\" #>  #> [[22]]$alive #> [1] TRUE #>  #> [[22]]$titles #> [1] \"Lord of Griffin's Roost\" \"Hand of the King\"        #> [3] \"Hand of the True King\"   #>  #> [[22]]$aliases #> [1] \"Griffthe Mad King's Hand\" #>  #> [[22]]$father #> [1] \"\" #>  #> [[22]]$mother #> [1] \"\" #>  #> [[22]]$spouse #> [1] \"\" #>  #> [[22]]$allegiances #> [1] \"House Connington of Griffin's Roost\" \"House Targaryen of King's Landing\"   #>  #> [[22]]$books #> [1] \"A Storm of Swords\"         \"A Feast for Crows\"         #> [3] \"The World of Ice and Fire\" #>  #> [[22]]$povBooks #> [1] \"A Dance with Dragons\" #>  #> [[22]]$tvSeries #> [1] \"\" #>  #> [[22]]$playedBy #> [1] \"\" #>  #>  #> [[23]] #> [[23]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/583\" #>  #> [[23]]$id #> [1] 583 #>  #> [[23]]$name #> [1] \"Jon Snow\" #>  #> [[23]]$gender #> [1] \"Male\" #>  #> [[23]]$culture #> [1] \"Northmen\" #>  #> [[23]]$born #> [1] \"In 283 AC\" #>  #> [[23]]$died #> [1] \"\" #>  #> [[23]]$alive #> [1] TRUE #>  #> [[23]]$titles #> [1] \"Lord Commander of the Night's Watch\" #>  #> [[23]]$aliases #> [1] \"Lord Snow\"                                     #> [2] \"Ned Stark's Bastard\"                           #> [3] \"The Snow of Winterfell\"                        #> [4] \"The Crow-Come-Over\"                            #> [5] \"The 998th Lord Commander of the Night's Watch\" #> [6] \"The Bastard of Winterfell\"                     #> [7] \"The Black Bastard of the Wall\"                 #> [8] \"Lord Crow\"                                     #>  #> [[23]]$father #> [1] \"\" #>  #> [[23]]$mother #> [1] \"\" #>  #> [[23]]$spouse #> [1] \"\" #>  #> [[23]]$allegiances #> [1] \"House Stark of Winterfell\" #>  #> [[23]]$books #> [1] \"A Feast for Crows\" #>  #> [[23]]$povBooks #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Storm of Swords\"    #> [4] \"A Dance with Dragons\" #>  #> [[23]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[23]]$playedBy #> [1] \"Kit Harington\" #>  #>  #> [[24]] #> [[24]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/60\" #>  #> [[24]]$id #> [1] 60 #>  #> [[24]]$name #> [1] \"Aeron Greyjoy\" #>  #> [[24]]$gender #> [1] \"Male\" #>  #> [[24]]$culture #> [1] \"Ironborn\" #>  #> [[24]]$born #> [1] \"In or between 269 AC and 273 AC, at Pyke\" #>  #> [[24]]$died #> [1] \"\" #>  #> [[24]]$alive #> [1] TRUE #>  #> [[24]]$titles #> [1] \"Priest of the Drowned God\"              #> [2] \"Captain of the Golden Storm (formerly)\" #>  #> [[24]]$aliases #> [1] \"The Damphair\"   \"Aeron Damphair\" #>  #> [[24]]$father #> [1] \"\" #>  #> [[24]]$mother #> [1] \"\" #>  #> [[24]]$spouse #> [1] \"\" #>  #> [[24]]$allegiances #> [1] \"House Greyjoy of Pyke\" #>  #> [[24]]$books #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Storm of Swords\"    #> [4] \"A Dance with Dragons\" #>  #> [[24]]$povBooks #> [1] \"A Feast for Crows\" #>  #> [[24]]$tvSeries #> [1] \"Season 6\" #>  #> [[24]]$playedBy #> [1] \"Michael Feast\" #>  #>  #> [[25]] #> [[25]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/605\" #>  #> [[25]]$id #> [1] 605 #>  #> [[25]]$name #> [1] \"Kevan Lannister\" #>  #> [[25]]$gender #> [1] \"Male\" #>  #> [[25]]$culture #> [1] \"\" #>  #> [[25]]$born #> [1] \"In 244 AC\" #>  #> [[25]]$died #> [1] \"In 300 AC, at King's Landing\" #>  #> [[25]]$alive #> [1] FALSE #>  #> [[25]]$titles #> [1] \"Ser\"                    \"Master of laws\"         \"Lord Regent\"            #> [4] \"Protector of the Realm\" #>  #> [[25]]$aliases #> [1] \"\" #>  #> [[25]]$father #> [1] \"\" #>  #> [[25]]$mother #> [1] \"\" #>  #> [[25]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/327\" #>  #> [[25]]$allegiances #> [1] \"House Lannister of Casterly Rock\" #>  #> [[25]]$books #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  \"A Storm of Swords\" #> [4] \"A Feast for Crows\" #>  #> [[25]]$povBooks #> [1] \"A Dance with Dragons\" #>  #> [[25]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 5\" \"Season 6\" #>  #> [[25]]$playedBy #> [1] \"Ian Gelder\" #>  #>  #> [[26]] #> [[26]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/743\" #>  #> [[26]]$id #> [1] 743 #>  #> [[26]]$name #> [1] \"Melisandre\" #>  #> [[26]]$gender #> [1] \"Female\" #>  #> [[26]]$culture #> [1] \"Asshai\" #>  #> [[26]]$born #> [1] \"At Unknown\" #>  #> [[26]]$died #> [1] \"\" #>  #> [[26]]$alive #> [1] TRUE #>  #> [[26]]$titles #> [1] \"\" #>  #> [[26]]$aliases #> [1] \"The Red Priestess\"     \"The Red Woman\"         \"The King's Red Shadow\" #> [4] \"Lady Red\"              \"Lot Seven\"             #>  #> [[26]]$father #> [1] \"\" #>  #> [[26]]$mother #> [1] \"\" #>  #> [[26]]$spouse #> [1] \"\" #>  #> [[26]]$allegiances #> list() #>  #> [[26]]$books #> [1] \"A Clash of Kings\"  \"A Storm of Swords\" \"A Feast for Crows\" #>  #> [[26]]$povBooks #> [1] \"A Dance with Dragons\" #>  #> [[26]]$tvSeries #> [1] \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[26]]$playedBy #> [1] \"Carice van Houten\" #>  #>  #> [[27]] #> [[27]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/751\" #>  #> [[27]]$id #> [1] 751 #>  #> [[27]]$name #> [1] \"Merrett Frey\" #>  #> [[27]]$gender #> [1] \"Male\" #>  #> [[27]]$culture #> [1] \"Rivermen\" #>  #> [[27]]$born #> [1] \"In 262 AC\" #>  #> [[27]]$died #> [1] \"In 300 AC, at Near Oldstones\" #>  #> [[27]]$alive #> [1] FALSE #>  #> [[27]]$titles #> [1] \"\" #>  #> [[27]]$aliases #> [1] \"Merrett Muttonhead\" #>  #> [[27]]$father #> [1] \"\" #>  #> [[27]]$mother #> [1] \"\" #>  #> [[27]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/712\" #>  #> [[27]]$allegiances #> [1] \"House Frey of the Crossing\" #>  #> [[27]]$books #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Feast for Crows\"    #> [4] \"A Dance with Dragons\" #>  #> [[27]]$povBooks #> [1] \"A Storm of Swords\" #>  #> [[27]]$tvSeries #> [1] \"\" #>  #> [[27]]$playedBy #> [1] \"\" #>  #>  #> [[28]] #> [[28]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/844\" #>  #> [[28]]$id #> [1] 844 #>  #> [[28]]$name #> [1] \"Quentyn Martell\" #>  #> [[28]]$gender #> [1] \"Male\" #>  #> [[28]]$culture #> [1] \"Dornish\" #>  #> [[28]]$born #> [1] \"In 281 AC, at Sunspear, Dorne\" #>  #> [[28]]$died #> [1] \"In 300 AC, at Meereen\" #>  #> [[28]]$alive #> [1] FALSE #>  #> [[28]]$titles #> [1] \"Prince\" #>  #> [[28]]$aliases #> [1] \"Frog\"                         \"Prince Frog\"                  #> [3] \"The prince who came too late\" \"The Dragonrider\"              #>  #> [[28]]$father #> [1] \"\" #>  #> [[28]]$mother #> [1] \"\" #>  #> [[28]]$spouse #> [1] \"\" #>  #> [[28]]$allegiances #> [1] \"House Nymeros Martell of Sunspear\" #>  #> [[28]]$books #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  \"A Storm of Swords\" #> [4] \"A Feast for Crows\" #>  #> [[28]]$povBooks #> [1] \"A Dance with Dragons\" #>  #> [[28]]$tvSeries #> [1] \"\" #>  #> [[28]]$playedBy #> [1] \"\" #>  #>  #> [[29]] #> [[29]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/954\" #>  #> [[29]]$id #> [1] 954 #>  #> [[29]]$name #> [1] \"Samwell Tarly\" #>  #> [[29]]$gender #> [1] \"Male\" #>  #> [[29]]$culture #> [1] \"Andal\" #>  #> [[29]]$born #> [1] \"In 283 AC, at Horn Hill\" #>  #> [[29]]$died #> [1] \"\" #>  #> [[29]]$alive #> [1] TRUE #>  #> [[29]]$titles #> [1] \"\" #>  #> [[29]]$aliases #> [1] \"Sam\"              \"Ser Piggy\"        \"Prince Pork-chop\" \"Lady Piggy\"       #> [5] \"Sam the Slayer\"   \"Black Sam\"        \"Lord of Ham\"      #>  #> [[29]]$father #> [1] \"\" #>  #> [[29]]$mother #> [1] \"\" #>  #> [[29]]$spouse #> [1] \"\" #>  #> [[29]]$allegiances #> [1] \"House Tarly of Horn Hill\" #>  #> [[29]]$books #> [1] \"A Game of Thrones\"    \"A Clash of Kings\"     \"A Dance with Dragons\" #>  #> [[29]]$povBooks #> [1] \"A Storm of Swords\" \"A Feast for Crows\" #>  #> [[29]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[29]]$playedBy #> [1] \"John Bradley-West\" #>  #>  #> [[30]] #> [[30]]$url #> [1] \"https://www.anapioficeandfire.com/api/characters/957\" #>  #> [[30]]$id #> [1] 957 #>  #> [[30]]$name #> [1] \"Sansa Stark\" #>  #> [[30]]$gender #> [1] \"Female\" #>  #> [[30]]$culture #> [1] \"Northmen\" #>  #> [[30]]$born #> [1] \"In 286 AC, at Winterfell\" #>  #> [[30]]$died #> [1] \"\" #>  #> [[30]]$alive #> [1] TRUE #>  #> [[30]]$titles #> [1] \"Princess\" #>  #> [[30]]$aliases #> [1] \"Little bird\"  \"Alayne Stone\" \"Jonquil\"      #>  #> [[30]]$father #> [1] \"\" #>  #> [[30]]$mother #> [1] \"\" #>  #> [[30]]$spouse #> [1] \"https://www.anapioficeandfire.com/api/characters/1052\" #>  #> [[30]]$allegiances #> [1] \"House Baelish of Harrenhal\" \"House Stark of Winterfell\"  #>  #> [[30]]$books #> [1] \"A Dance with Dragons\" #>  #> [[30]]$povBooks #> [1] \"A Game of Thrones\" \"A Clash of Kings\"  \"A Storm of Swords\" #> [4] \"A Feast for Crows\" #>  #> [[30]]$tvSeries #> [1] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" \"Season 5\" \"Season 6\" #>  #> [[30]]$playedBy #> [1] \"Sophie Turner\" #>  #>  str(lapply(got_chars, `[`, c(\"name\", \"culture\"))) #> List of 30 #>  $ :List of 2 #>   ..$ name   : chr \"Theon Greyjoy\" #>   ..$ culture: chr \"Ironborn\" #>  $ :List of 2 #>   ..$ name   : chr \"Tyrion Lannister\" #>   ..$ culture: chr \"\" #>  $ :List of 2 #>   ..$ name   : chr \"Victarion Greyjoy\" #>   ..$ culture: chr \"Ironborn\" #>  $ :List of 2 #>   ..$ name   : chr \"Will\" #>   ..$ culture: chr \"\" #>  $ :List of 2 #>   ..$ name   : chr \"Areo Hotah\" #>   ..$ culture: chr \"Norvoshi\" #>  $ :List of 2 #>   ..$ name   : chr \"Chett\" #>   ..$ culture: chr \"\" #>  $ :List of 2 #>   ..$ name   : chr \"Cressen\" #>   ..$ culture: chr \"\" #>  $ :List of 2 #>   ..$ name   : chr \"Arianne Martell\" #>   ..$ culture: chr \"Dornish\" #>  $ :List of 2 #>   ..$ name   : chr \"Daenerys Targaryen\" #>   ..$ culture: chr \"Valyrian\" #>  $ :List of 2 #>   ..$ name   : chr \"Davos Seaworth\" #>   ..$ culture: chr \"Westeros\" #>  $ :List of 2 #>   ..$ name   : chr \"Arya Stark\" #>   ..$ culture: chr \"Northmen\" #>  $ :List of 2 #>   ..$ name   : chr \"Arys Oakheart\" #>   ..$ culture: chr \"Reach\" #>  $ :List of 2 #>   ..$ name   : chr \"Asha Greyjoy\" #>   ..$ culture: chr \"Ironborn\" #>  $ :List of 2 #>   ..$ name   : chr \"Barristan Selmy\" #>   ..$ culture: chr \"Westeros\" #>  $ :List of 2 #>   ..$ name   : chr \"Varamyr\" #>   ..$ culture: chr \"Free Folk\" #>  $ :List of 2 #>   ..$ name   : chr \"Brandon Stark\" #>   ..$ culture: chr \"Northmen\" #>  $ :List of 2 #>   ..$ name   : chr \"Brienne of Tarth\" #>   ..$ culture: chr \"\" #>  $ :List of 2 #>   ..$ name   : chr \"Catelyn Stark\" #>   ..$ culture: chr \"Rivermen\" #>  $ :List of 2 #>   ..$ name   : chr \"Cersei Lannister\" #>   ..$ culture: chr \"Westerman\" #>  $ :List of 2 #>   ..$ name   : chr \"Eddard Stark\" #>   ..$ culture: chr \"Northmen\" #>  $ :List of 2 #>   ..$ name   : chr \"Jaime Lannister\" #>   ..$ culture: chr \"Westerlands\" #>  $ :List of 2 #>   ..$ name   : chr \"Jon Connington\" #>   ..$ culture: chr \"Stormlands\" #>  $ :List of 2 #>   ..$ name   : chr \"Jon Snow\" #>   ..$ culture: chr \"Northmen\" #>  $ :List of 2 #>   ..$ name   : chr \"Aeron Greyjoy\" #>   ..$ culture: chr \"Ironborn\" #>  $ :List of 2 #>   ..$ name   : chr \"Kevan Lannister\" #>   ..$ culture: chr \"\" #>  $ :List of 2 #>   ..$ name   : chr \"Melisandre\" #>   ..$ culture: chr \"Asshai\" #>  $ :List of 2 #>   ..$ name   : chr \"Merrett Frey\" #>   ..$ culture: chr \"Rivermen\" #>  $ :List of 2 #>   ..$ name   : chr \"Quentyn Martell\" #>   ..$ culture: chr \"Dornish\" #>  $ :List of 2 #>   ..$ name   : chr \"Samwell Tarly\" #>   ..$ culture: chr \"Andal\" #>  $ :List of 2 #>   ..$ name   : chr \"Sansa Stark\" #>   ..$ culture: chr \"Northmen\""},{"path":"https://mgirlich.github.io/tibblify/reference/guess_tspec.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess the tibblify() Specification — guess_tspec","title":"Guess the tibblify() Specification — guess_tspec","text":"Use guess_tspec() know input type. Use guess_tspec_df() input data frame object list. Use guess_tspec_objecte() input object.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/guess_tspec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess the tibblify() Specification — guess_tspec","text":"","code":"guess_tspec(   x,   ...,   empty_list_unspecified = FALSE,   simplify_list = FALSE,   inform_unspecified = should_inform_unspecified(),   call = rlang::current_call() )  guess_tspec_df(   x,   ...,   empty_list_unspecified = FALSE,   simplify_list = FALSE,   inform_unspecified = should_inform_unspecified(),   call = rlang::current_call(),   arg = rlang::caller_arg(x) )  guess_tspec_object(   x,   ...,   empty_list_unspecified = FALSE,   simplify_list = FALSE,   call = rlang::current_call() )"},{"path":"https://mgirlich.github.io/tibblify/reference/guess_tspec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess the tibblify() Specification — guess_tspec","text":"x nested list. ... dots future extensions must empty. empty_list_unspecified Treat empty lists unspecified? simplify_list scalar lists simplified vectors? inform_unspecified Inform fields whose type determined? call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. arg argument name string. argument mentioned error messages input origin problem.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/guess_tspec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess the tibblify() Specification — guess_tspec","text":"specification object can used tibblify().","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/guess_tspec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess the tibblify() Specification — guess_tspec","text":"","code":"guess_tspec(list(x = 1, y = \"a\")) #> tspec_object( #>   tib_dbl(\"x\"), #>   tib_chr(\"y\"), #> ) guess_tspec(list(list(x = 1), list(x = 2))) #> tspec_df( #>   tib_dbl(\"x\"), #> )  guess_tspec(gh_users) #> The spec contains 1 unspecified field: #> • email #> tspec_df( #>   tib_chr(\"login\"), #>   tib_int(\"id\"), #>   tib_chr(\"avatar_url\"), #>   tib_chr(\"gravatar_id\"), #>   tib_chr(\"url\"), #>   tib_chr(\"html_url\"), #>   tib_chr(\"followers_url\"), #>   tib_chr(\"following_url\"), #>   tib_chr(\"gists_url\"), #>   tib_chr(\"starred_url\"), #>   tib_chr(\"subscriptions_url\"), #>   tib_chr(\"organizations_url\"), #>   tib_chr(\"repos_url\"), #>   tib_chr(\"events_url\"), #>   tib_chr(\"received_events_url\"), #>   tib_chr(\"type\"), #>   tib_lgl(\"site_admin\"), #>   tib_chr(\"name\"), #>   tib_chr(\"company\"), #>   tib_chr(\"blog\"), #>   tib_chr(\"location\"), #>   tib_unspecified(\"email\"), #>   tib_lgl(\"hireable\"), #>   tib_chr(\"bio\"), #>   tib_int(\"public_repos\"), #>   tib_int(\"public_gists\"), #>   tib_int(\"followers\"), #>   tib_int(\"following\"), #>   tib_chr(\"created_at\"), #>   tib_chr(\"updated_at\"), #> )"},{"path":"https://mgirlich.github.io/tibblify/reference/nest_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame to a tree — nest_tree","title":"Convert a data frame to a tree — nest_tree","text":"Convert data frame tree","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/nest_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame to a tree — nest_tree","text":"","code":"nest_tree(data, id_col, parent_col, children_to)"},{"path":"https://mgirlich.github.io/tibblify/reference/nest_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame to a tree — nest_tree","text":"data data frame. id_col Id column. values must unique non-missing. parent_col Parent column. value must either missing (root elements) appear id_col column. children_to Name column children put.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/nest_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data frame to a tree — nest_tree","text":"tree like data frame.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/nest_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data frame to a tree — nest_tree","text":"","code":"df <- tibble::tibble(   id = 1:5,   x = letters[1:5],   parent = c(NA, NA, 1L, 2L, 4L) ) out <- nest_tree(df, id, parent, \"children\") out #> # A tibble: 2 × 3 #>      id x     children         #>   <int> <chr> <list>           #> 1     1 a     <tibble [1 × 3]> #> 2     2 b     <tibble [1 × 3]>  out$children #> [[1]] #> # A tibble: 1 × 3 #>      id x     children #>   <int> <chr> <list>   #> 1     3 c     <NULL>   #>  #> [[2]] #> # A tibble: 1 × 3 #>      id x     children         #>   <int> <chr> <list>           #> 1     4 d     <tibble [1 × 3]> #>  out$children[[2]]$children #> [[1]] #> # A tibble: 1 × 3 #>      id x     children #>   <int> <chr> <list>   #> 1     5 e     <NULL>   #>"},{"path":"https://mgirlich.github.io/tibblify/reference/parse_openapi_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse an OpenAPI spec — parse_openapi_spec","title":"Parse an OpenAPI spec — parse_openapi_spec","text":"Use parse_openapi_spec() parse OpenAPI spec use parse_openapi_schema() parse OpenAPI schema.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/parse_openapi_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse an OpenAPI spec — parse_openapi_spec","text":"","code":"parse_openapi_spec(file)  parse_openapi_schema(file)"},{"path":"https://mgirlich.github.io/tibblify/reference/parse_openapi_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse an OpenAPI spec — parse_openapi_spec","text":"file Either path file, connection, literal data (single string).","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/parse_openapi_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse an OpenAPI spec — parse_openapi_spec","text":"parse_openapi_spec() data frame columns endpoint <character> Name endpoint. operation <character> http operation; one \"get\", \"put\", \"post\", \"delete\", \"options\", \"head\", \"patch\", \"trace\". status_code <character> http status code. May contain wildcards like 2xx response codes 200 299. media_type <character> media type. spec <list> list tibblify specifications. parse_openapi_schema() tibblify spec.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/parse_openapi_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse an OpenAPI spec — parse_openapi_spec","text":"","code":"file <- '{   \"$schema\": \"http://json-schema.org/draft-04/schema\",   \"title\": \"Starship\",   \"description\": \"A vehicle.\",   \"type\": \"object\",   \"properties\": {     \"name\": {       \"type\": \"string\",       \"description\": \"The name of this vehicle. The common name, e.g. Sand Crawler.\"     },     \"model\": {       \"type\": \"string\",       \"description\": \"The model or official name of this vehicle.\"     },     \"url\": {       \"type\": \"string\",       \"format\": \"uri\",       \"description\": \"The hypermedia URL of this resource.\"     },     \"edited\": {       \"type\": \"string\",       \"format\": \"date-time\",       \"description\": \"the ISO 8601 date format of the time this resource was edited.\"     }   },   \"required\": [     \"name\",     \"model\",     \"edited\"   ] }'  parse_openapi_schema(file) #> tspec_row( #>   tib_chr(\"name\"), #>   tib_chr(\"model\"), #>   tib_chr(\"url\", required = FALSE), #>   tib_chr(\"edited\"), #> )"},{"path":"https://mgirlich.github.io/tibblify/reference/politicians.html","id":null,"dir":"Reference","previous_headings":"","what":"Politicians — politicians","title":"Politicians — politicians","text":"dataset containing basic information politicians.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/politicians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Politicians — politicians","text":"","code":"politicians"},{"path":"https://mgirlich.github.io/tibblify/reference/politicians.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Politicians — politicians","text":"list lists.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. rlang zap tibble tibble","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/should_inform_unspecified.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether to inform about unspecified fields in spec — should_inform_unspecified","title":"Determine whether to inform about unspecified fields in spec — should_inform_unspecified","text":"Wrapper around getOption(\"tibblify.show_unspecified\") implements #' fall back logic option unset. returns:","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/should_inform_unspecified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether to inform about unspecified fields in spec — should_inform_unspecified","text":"","code":"should_inform_unspecified()"},{"path":"https://mgirlich.github.io/tibblify/reference/should_inform_unspecified.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine whether to inform about unspecified fields in spec — should_inform_unspecified","text":"TRUE FALSE.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/should_inform_unspecified.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine whether to inform about unspecified fields in spec — should_inform_unspecified","text":"TRUE option set TRUE FALSE option set FALSE FALSE option unset appear running tests TRUE otherwise","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tib_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Field Specification — tib_unspecified","title":"Create a Field Specification — tib_unspecified","text":"Use functions specify convert fields object.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tib_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Field Specification — tib_unspecified","text":"","code":"tib_unspecified(key, ..., required = TRUE)  tib_scalar(   key,   ptype,   ...,   required = TRUE,   fill = NULL,   ptype_inner = ptype,   transform = NULL )  tib_lgl(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = logical(),   transform = NULL )  tib_int(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = integer(),   transform = NULL )  tib_dbl(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = double(),   transform = NULL )  tib_chr(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = character(),   transform = NULL )  tib_date(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = vctrs::new_date(),   transform = NULL )  tib_chr_date(key, ..., required = TRUE, fill = NULL, format = \"%Y-%m-%d\")  tib_vector(   key,   ptype,   ...,   required = TRUE,   fill = NULL,   ptype_inner = ptype,   transform = NULL,   elt_transform = NULL,   input_form = c(\"vector\", \"scalar_list\", \"object\"),   values_to = NULL,   names_to = NULL )  tib_lgl_vec(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = logical(),   transform = NULL,   elt_transform = NULL,   input_form = c(\"vector\", \"scalar_list\", \"object\"),   values_to = NULL,   names_to = NULL )  tib_int_vec(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = integer(),   transform = NULL,   elt_transform = NULL,   input_form = c(\"vector\", \"scalar_list\", \"object\"),   values_to = NULL,   names_to = NULL )  tib_dbl_vec(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = double(),   transform = NULL,   elt_transform = NULL,   input_form = c(\"vector\", \"scalar_list\", \"object\"),   values_to = NULL,   names_to = NULL )  tib_chr_vec(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = character(),   transform = NULL,   elt_transform = NULL,   input_form = c(\"vector\", \"scalar_list\", \"object\"),   values_to = NULL,   names_to = NULL )  tib_date_vec(   key,   ...,   required = TRUE,   fill = NULL,   ptype_inner = vctrs::new_date(),   transform = NULL,   elt_transform = NULL,   input_form = c(\"vector\", \"scalar_list\", \"object\"),   values_to = NULL,   names_to = NULL )  tib_chr_date_vec(   key,   ...,   required = TRUE,   fill = NULL,   input_form = c(\"vector\", \"scalar_list\", \"object\"),   values_to = NULL,   names_to = NULL,   format = \"%Y-%m-%d\" )  tib_variant(   key,   ...,   required = TRUE,   fill = NULL,   transform = NULL,   elt_transform = NULL )  tib_recursive(.key, ..., .children, .children_to = .children, .required = TRUE)  tib_row(.key, ..., .required = TRUE)  tib_df(.key, ..., .required = TRUE, .names_to = NULL)"},{"path":"https://mgirlich.github.io/tibblify/reference/tib_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Field Specification — tib_unspecified","text":"key, .key path field object. ... dots future extensions must empty. required, .required Throw error field exist? ptype prototype desired output type field. fill Optionally, value use field exist. ptype_inner prototype field. transform function apply whole vector casting ptype_inner. format Optional, string passed format argument .Date(). elt_transform function apply element casting ptype_inner. input_form string describes structure field . Can one : \"vector\": field vector, e.g. c(1, 2, 3). \"scalar_list\": field list scalars, e.g. list(1, 2, 3). \"object\": field named list scalars, e.g. list(= 1, b = 2, c = 3). values_to Can one following: NULL: default. field converted ptype vector. string: field converted tibble values go specified column. names_to Can one following: NULL: default. inner names field used. string: can used 1) input form \"object\" \"vector\" 2) values_to string. inner names field go specified column. .children string giving name field contains children. .children_to string giving column name store children. .names_to string giving name column contain names elements object list. NULL, default, name column created","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tib_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Field Specification — tib_unspecified","text":"tibblify field collector.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tib_scalar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Field Specification — tib_unspecified","text":"basically five different tib_*() functions tib_scalar(ptype): Cast field length one vector type ptype. tib_vector(ptype): Cast field arbitrary length vector type ptype. tib_variant(): Cast field list. tib_row(): Cast field named list. tib_df(): Cast field tibble. special shortcuts tib_scalar() resp. tib_vector() common prototypes logical(): tib_lgl() resp. tib_lgl_vec() integer(): tib_int() resp. tib_int_vec() double(): tib_dbl() resp. tib_dbl_vec() character(): tib_chr() resp. tib_chr_vec() Date: tib_date() resp. tib_date_vec() , also special shortcut dates encoded character: tib_chr_date() resp. tib_chr_date_vec().","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tib_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Field Specification — tib_unspecified","text":"","code":"tib_int(\"int\") #> tib_int(\"int\") tib_int(\"int\", required = FALSE, fill = 0) #> tib_int( #>   \"int\", #>   required = FALSE, #>   fill = 0L, #> )  tib_scalar(\"date\", Sys.Date(), transform = function(x) as.Date(x, format = \"%Y-%m-%d\")) #> tib_date(\"date\", transform = function (x)  #> as.Date(x, format = \"%Y-%m-%d\"))  tib_df(   \"data\",   .names_to = \"id\",   age = tib_int(\"age\"),   name = tib_chr(\"name\") ) #> tib_df( #>   \"data\", #>   .names_to = \"id\", #>   tib_int(\"age\"), #>   tib_chr(\"name\"), #> )"},{"path":"https://mgirlich.github.io/tibblify/reference/tibblify-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tibblify: Rectangle Nested Lists — tibblify-package","title":"tibblify: Rectangle Nested Lists — tibblify-package","text":"tool rectangle nested list, convert tibble. done automatically according given specification. common use case nested lists coming parsing JSON files JSON response REST APIs. supported 'vctrs' package therefore offers wide support vector types.","code":""},{"path":[]},{"path":"https://mgirlich.github.io/tibblify/reference/tibblify-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tibblify: Rectangle Nested Lists — tibblify-package","text":"Maintainer: Maximilian Girlich maximilian.girlich@outlook.com [copyright holder] contributors: Kirill Müller [contributor]","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tibblify.html","id":null,"dir":"Reference","previous_headings":"","what":"Rectangle a nested list — tibblify","title":"Rectangle a nested list — tibblify","text":"Rectangle nested list","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tibblify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rectangle a nested list — tibblify","text":"","code":"tibblify(x, spec = NULL, unspecified = NULL)"},{"path":"https://mgirlich.github.io/tibblify/reference/tibblify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rectangle a nested list — tibblify","text":"x nested list. spec specification convert x. Generated tspec_row() tspec_df(). unspecified string describes happens specification contains unspecified fields. Can one \"error\": Throw error. \"inform\": Inform. \"drop\": parse fields. \"list\": Parse unspecified field list.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tibblify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rectangle a nested list — tibblify","text":"Either tibble list, depending specification","code":""},{"path":[]},{"path":"https://mgirlich.github.io/tibblify/reference/tibblify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rectangle a nested list — tibblify","text":"","code":"# List of Objects ----------------------------------------------------------- x <- list(   list(id = 1, name = \"Tyrion Lannister\"),   list(id = 2, name = \"Victarion Greyjoy\") ) tibblify(x) #> # A tibble: 2 × 2 #>      id name              #>   <dbl> <chr>             #> 1     1 Tyrion Lannister  #> 2     2 Victarion Greyjoy  # Provide a specification spec <- tspec_df(   id = tib_int(\"id\"),   name = tib_chr(\"name\") ) tibblify(x, spec) #> # A tibble: 2 × 2 #>      id name              #>   <int> <chr>             #> 1     1 Tyrion Lannister  #> 2     2 Victarion Greyjoy  # Object -------------------------------------------------------------------- # Provide a specification for a single object tibblify(x[[1]], tspec_object(spec)) #> $id #> [1] 1 #>  #> $name #> [1] \"Tyrion Lannister\" #>   # Recursive Trees ----------------------------------------------------------- x <- list(   list(     id = 1,     name = \"a\",     children = list(       list(id = 11, name = \"aa\"),       list(id = 12, name = \"ab\", children = list(         list(id = 121, name = \"aba\")       ))     )) ) spec <- tspec_recursive(   tib_int(\"id\"),   tib_chr(\"name\"),   .children = \"children\" ) out <- tibblify(x, spec) out #> # A tibble: 1 × 3 #>      id name  children         #>   <int> <chr> <list>           #> 1     1 a     <tibble [2 × 3]> out$children #> [[1]] #> # A tibble: 2 × 3 #>      id name  children         #>   <int> <chr> <list>           #> 1    11 aa    <NULL>           #> 2    12 ab    <tibble [1 × 3]> #>  out$children[[1]]$children[[2]] #> # A tibble: 1 × 3 #>      id name  children #>   <int> <chr> <list>   #> 1   121 aba   <NULL>"},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple specifications — tspec_combine","title":"Combine multiple specifications — tspec_combine","text":"Combine multiple specifications","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple specifications — tspec_combine","text":"","code":"tspec_combine(...)"},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple specifications — tspec_combine","text":"... Specifications combine.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple specifications — tspec_combine","text":"tibblify specification.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple specifications — tspec_combine","text":"","code":"# union of fields tspec_combine(   tspec_df(tib_int(\"a\")),   tspec_df(tib_chr(\"b\")) ) #> tspec_df( #>   tib_int(\"a\", required = FALSE), #>   tib_chr(\"b\", required = FALSE), #> )  # unspecified + x -> x tspec_combine(   tspec_df(tib_unspecified(\"a\"), tib_chr(\"b\")),   tspec_df(tib_int(\"a\"), tib_variant(\"b\")) ) #> tspec_df( #>   tib_int(\"a\"), #>   tib_variant(\"b\"), #> )  # scalar + vector -> vector tspec_combine(   tspec_df(tib_chr(\"a\")),   tspec_df(tib_chr_vec(\"a\")) ) #> tspec_df( #>   tib_chr_vec(\"a\"), #> )  # scalar/vector + variant -> variant tspec_combine(   tspec_df(tib_chr(\"a\")),   tspec_df(tib_variant(\"a\")) ) #> tspec_df( #>   tib_variant(\"a\"), #> )"},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Tibblify Specification — tspec_df","title":"Create a Tibblify Specification — tspec_df","text":"Use tspec_df() specify convert list objects tibble. Use tspec_row() resp. tspec_object() specify convert object one row tibble resp. list.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Tibblify Specification — tspec_df","text":"","code":"tspec_df(   ...,   .input_form = c(\"rowmajor\", \"colmajor\"),   .names_to = NULL,   vector_allows_empty_list = FALSE )  tspec_object(   ...,   .input_form = c(\"rowmajor\", \"colmajor\"),   vector_allows_empty_list = FALSE )  tspec_recursive(   ...,   .children,   .children_to = .children,   .input_form = c(\"rowmajor\", \"colmajor\"),   vector_allows_empty_list = FALSE )  tspec_row(   ...,   .input_form = c(\"rowmajor\", \"colmajor\"),   vector_allows_empty_list = FALSE )"},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Tibblify Specification — tspec_df","text":"... Column specification created tib_*() tspec_*(). .input_form input form data frame like lists. Can one : \"rowmajor\": default. data frame formed list rows. \"colmajor\": data frame named list columns. .names_to string giving name column contain names elements object list. NULL, default, name column created vector_allows_empty_list empty lists input_form = \"vector\" accepted treated empty vector? .children string giving name field contains children. .children_to string giving column name store children.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Tibblify Specification — tspec_df","text":"tibblify specification.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Tibblify Specification — tspec_df","text":"column major format fields required, regardless required argument.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/tspec_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Tibblify Specification — tspec_df","text":"","code":"tspec_df(   id = tib_int(\"id\"),   name = tib_chr(\"name\"),   aliases = tib_chr_vec(\"aliases\") ) #> tspec_df( #>   tib_int(\"id\"), #>   tib_chr(\"name\"), #>   tib_chr_vec(\"aliases\"), #> )  # To create multiple columns of the same type use the bang-bang-bang (!!!) # operator together with `purrr::map()` tspec_df(   !!!purrr::map(purrr::set_names(c(\"id\", \"age\")), tib_int),   !!!purrr::map(purrr::set_names(c(\"name\", \"title\")), tib_chr) ) #> tspec_df( #>   tib_int(\"id\"), #>   tib_int(\"age\"), #>   tib_chr(\"name\"), #>   tib_chr(\"title\"), #> )  # The `tspec_*()` functions can also be nested spec1 <- tspec_object(   int = tib_int(\"int\"),   chr = tib_chr(\"chr\") ) spec2 <- tspec_object(   int2 = tib_int(\"int2\"),   chr2 = tib_chr(\"chr2\") )  tspec_df(spec1, spec2) #> tspec_df( #>   tib_int(\"int\"), #>   tib_chr(\"chr\"), #>   tib_int(\"int2\"), #>   tib_chr(\"chr2\"), #> )"},{"path":"https://mgirlich.github.io/tibblify/reference/unnest_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest a recursive data frame — unnest_tree","title":"Unnest a recursive data frame — unnest_tree","text":"Unnest recursive data frame","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/unnest_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest a recursive data frame — unnest_tree","text":"","code":"unnest_tree(   data,   id_col,   child_col,   level_to = \"level\",   parent_to = \"parent\",   ancestors_to = NULL )"},{"path":"https://mgirlich.github.io/tibblify/reference/unnest_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest a recursive data frame — unnest_tree","text":"data data frame. id_col column uniquely identifies observation. child_col Column containing children observation. must list element either NULL data frame columns data. level_to string (\"level\" default) specifying new column store level observation. Use NULL need information. parent_to string (\"parent\" default) specifying new column storing parent id observation. Use NULL need information. ancestors_to string (NULL default) specifying new column storing ids ancestors. Use NULL need information.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/unnest_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest a recursive data frame — unnest_tree","text":"data frame.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/unnest_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest a recursive data frame — unnest_tree","text":"","code":"df <- tibble(   id = 1L,   name = \"a\",   children = list(     tibble(       id = 11:12,       name = c(\"b\", \"c\"),       children = list(         NULL,         tibble(           id = 121:122,           name = c(\"d\", \"e\")         )       )     )   ) )  unnest_tree(   df,   id_col = \"id\",   child_col = \"children\",   level_to = \"level\",   parent_to = \"parent\",   ancestors_to = \"ancestors\" ) #> # A tibble: 5 × 5 #>      id name  level parent ancestors #>   <int> <chr> <int>  <int> <list>    #> 1     1 a         1     NA <NULL>    #> 2    11 b         2      1 <int [1]> #> 3    12 c         2      1 <int [1]> #> 4   121 d         3     12 <int [2]> #> 5   122 e         3     12 <int [2]>"},{"path":"https://mgirlich.github.io/tibblify/reference/unpack_tspec.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack a tibblify specification — unpack_tspec","title":"Unpack a tibblify specification — unpack_tspec","text":"Unpack tibblify specification","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/unpack_tspec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack a tibblify specification — unpack_tspec","text":"","code":"unpack_tspec(   spec,   ...,   fields = NULL,   recurse = TRUE,   names_sep = NULL,   names_repair = c(\"unique\", \"universal\", \"check_unique\", \"unique_quiet\",     \"universal_quiet\"),   names_clean = NULL )  camel_case_to_snake_case(names)"},{"path":"https://mgirlich.github.io/tibblify/reference/unpack_tspec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack a tibblify specification — unpack_tspec","text":"spec tibblify specification. ... dots future extensions must empty. fields string fields unpack. recurse unpack recursively? names_sep NULL, default, inner names fields used. string, outer inner names pasted together, separated names_sep. names_repair Used check output data frame valid names. Must one following options: \"unique\" \"unique_quiet\": (default) make sure names unique empty, \"universal\" \"unique_quiet\"`: make names unique syntactic \"check_unique\": name repair, check unique, function: apply custom name repair. See vctrs::vec_as_names() information. names_clean function clean names repairing. example use camel_case_to_snake_case(). names Names clean","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/unpack_tspec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack a tibblify specification — unpack_tspec","text":"tibblify spec.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/unpack_tspec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unpack a tibblify specification — unpack_tspec","text":"","code":"spec <- tspec_df(   tib_lgl(\"a\"),   tib_row(\"x\", tib_int(\"b\"), tib_chr(\"c\")),   tib_row(\"y\", tib_row(\"z\", tib_chr(\"d\"))) )  unpack_tspec(spec) #> tspec_df( #>   tib_lgl(\"a\"), #>   b = tib_int(c(\"x\", \"b\")), #>   c = tib_chr(c(\"x\", \"c\")), #>   d = tib_chr(c(\"y\", \"z\", \"d\")), #> ) # only unpack `x` unpack_tspec(spec, fields = \"x\") #> tspec_df( #>   tib_lgl(\"a\"), #>   b = tib_int(c(\"x\", \"b\")), #>   c = tib_chr(c(\"x\", \"c\")), #>   tib_row( #>     \"y\", #>     tib_row( #>       \"z\", #>       tib_chr(\"d\"), #>     ), #>   ), #> ) # do not unpack the fields in `y` unpack_tspec(spec, recurse = FALSE) #> tspec_df( #>   tib_lgl(\"a\"), #>   b = tib_int(c(\"x\", \"b\")), #>   c = tib_chr(c(\"x\", \"c\")), #>   z = tib_row( #>     c(\"y\", \"z\"), #>     tib_chr(\"d\"), #>   ), #> )"},{"path":"https://mgirlich.github.io/tibblify/reference/untibblify.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame or object into a nested list — untibblify","title":"Convert a data frame or object into a nested list — untibblify","text":"inverse operation tibblify(). converts data frame object nested list.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/untibblify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame or object into a nested list — untibblify","text":"","code":"untibblify(x, spec = NULL)"},{"path":"https://mgirlich.github.io/tibblify/reference/untibblify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame or object into a nested list — untibblify","text":"x data frame object. spec Optional. spec object used create x.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/untibblify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data frame or object into a nested list — untibblify","text":"nested list.","code":""},{"path":"https://mgirlich.github.io/tibblify/reference/untibblify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data frame or object into a nested list — untibblify","text":"","code":"x <- tibble(   a = 1:2,   b = tibble(     x = c(\"a\", \"b\"),     y = c(1.5, 2.5)   ) ) untibblify(x) #> [[1]] #> [[1]]$a #> [1] 1 #>  #> [[1]]$b #> [[1]]$b$x #> [1] \"a\" #>  #> [[1]]$b$y #> [1] 1.5 #>  #>  #>  #> [[2]] #> [[2]]$a #> [1] 2 #>  #> [[2]]$b #> [[2]]$b$x #> [1] \"b\" #>  #> [[2]]$b$y #> [1] 2.5 #>  #>  #>"},{"path":[]},{"path":"https://mgirlich.github.io/tibblify/news/index.html","id":"tibblify-031","dir":"Changelog","previous_headings":"","what":"tibblify 0.3.1","title":"tibblify 0.3.1","text":"CRAN release: 2024-01-11 New parse_openapi_spec() parse_openapi_schema() convert OpenAPI specification tibblify specification. Fix ptype tib_vector() inside tib_df(). New unpack_tspec() unpack elements tib_row() fields (#165). Improved printing lists parsed tspec_object(). Improved performance tspec() family. Improved guessing.","code":""},{"path":"https://mgirlich.github.io/tibblify/news/index.html","id":"tibblify-030","dir":"Changelog","previous_headings":"","what":"tibblify 0.3.0","title":"tibblify 0.3.0","text":"CRAN release: 2022-11-16 column major format fields required. Fixed memory leak. tib_vector() now uses less memory faster. tspec_*(), tib_df(), tib_row() now discard NULL .... makes easier add field conditionally , example tspec_df((x) tib_int(\"\")). tib_variant() tib_vector() give control transforming: transform now applied whole vector. new elt_transform argument applied every element. New tspec_recursive() tib_recursive() parse tree like structure, e.g. directory structure children.","code":""},{"path":"https://mgirlich.github.io/tibblify/news/index.html","id":"tibblify-020","dir":"Changelog","previous_headings":"","what":"tibblify 0.2.0","title":"tibblify 0.2.0","text":"CRAN release: 2022-07-14 Major rewrite tibblify package lots benefits: tibblify() now implemented C therefore way faster. Support column major format. Support vectors scalar lists objects. Specification functions renamed lcols() tspec_df() new specs tspec_object() tspec_row() lcol_int() tib_int() etc tspec_df() gains argument .names_to store names recordlist column. Added untibblify() turn tibble nested list, .e. reverse action tibblify(). Added spec_combine() combine multiple specifications. Added argument unspecified tibblify() control handle unspecified fields. Many bugfixes.","code":""},{"path":"https://mgirlich.github.io/tibblify/news/index.html","id":"tibblify-010","dir":"Changelog","previous_headings":"","what":"tibblify 0.1.0","title":"tibblify 0.1.0","text":"CRAN release: 2020-09-23 First CRAN release.","code":""}]
